
/*

// scoped functions:

// Unless the ~ ideas can be implemented very simply, I think we should just go for `defer`, jai style.

#temp_push: proc() => TempMemoryScope {
	return {
		^Arena(TlsGetValue(_tl_arena_tls_index))
		ArenaMark{^u8(0)}
	}
}

#temp_pop: proc(scope: TempMemoryScope) {}

#temp_scope: scoped_proc(temp_push, temp_pop)


#ui_menu: proc(name: string) => UI_Menu {
	...
}

{
	temp: Basic.temp_scope()~
	
	if menu: ui_menu("hi")~, menu.show {
	}
	
	if ui_color(1, 1, 0, 1)~, {
		profile_scope("my_thing")~
	}
}

For metaprogramming tools, it'd be good/necessary to expand the deferred calls back into AST.
That does mean that the checker should have write access to the AST nodes.
But then at the same time, isn't it kinda the same thing with e.g. the 3rd statement in a for loop header?
We could expand it into the body (and before continues) and it'd be easier for metaprogramming.

But when exactly does defer run? Intuitively, we'd place the deferred code right before the return statement.
However, this can problematic:

	temp: Basic.temp_scope()~
	return copy_string("hi", temp)

So we want to run the deferred code AFTER the value in the return value has been computed, but BEFORE returning.

debug idea: make a local variable called "return", and instead of returning immediately, with F10, return 1 line later!
That way you can inspect the return value in the debugger!
Then, maybe we can also support the following:

	temp: Basic.temp_push()
	return copy_string("hi", temp); Basic.temp_pop(temp)  // Basic.temp_pop(temp) is executed after the return value is determined, but before returning.

*/