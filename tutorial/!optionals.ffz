// proposal: optional types

/*
could we say that ?T is the same as struct{value: T, is: b1}
with the exception of pointers, slices, strings, bool, int and uint?

Then maybe you could say foo: ?u31 if you wanted to be smart

- ?int could be ?s63 and ?uint could be ?u63
*/

#read_file_1: proc(filepath: string) => ?string {
	...
	if ... return nil
	return "hello"
}

#Error: enum{FileDoesNotExist, NoPrivilige, FileIsLocked}
#Result: union{string, Error}

#read_file_2: proc(filepath: string) => Result {
	...
}

/*
#outer: proc(filepath: string) => Result {
	file: read_file_2(filepath)
	file as string or_ret
	
	// shorthand for before could be:
	file: read_file_2(filepath) as string or_ret
}
*/

#outer: proc(filepath: string) => Result {
	file_: read_file_2(filepath)
	if file_.string == nil {
		return file_
	}
	file: file_.string!
	
	// shorthand for before could be:
	file2_: read_file_2(filepath)
	file2: file2_.string! if file2_.string? else return file2_
	
	// another shorthand: 
	file2_: read_file_2(filepath)
	file2: file2_.string !: return file2_  // unwrap-or-statement
	
	file2: file2_.string !: "failed..."  // unwrap-or-expression
	
	my_optional: ?int(nil)
	
	err: ?Error(nil)
	
	my_block: {
		file2_: read_file_2(filepath)
		/*
		file2: file2_.string !: {
			err = file2_.Error?
			break my_block
		}
		*/
		/*
		if file2_ == nil {
			err = file2_.Error
			break my_block
		}
		file2: file2_.string?
		*/
		
		file2: file2_.string! if file2_.string? else break my_block
		
		file2: {break my_block} if file2_.string == nil else file2_.string!
		
		my_array: []int
		first: my_array[0] if my_array.len > 0 else break my_block
		
		// to have it be as ergonomic in the other way too, maybe we should allow
		if my_array.len > 0, first: my_array[0] {
		}
		
		// yeah, this would be pretty nice.
		if node.kind == .Keyword, keyword: my_node.Keyword {
		}
		
		if my_optional?, thing: my_optional! {
		}
		
		if _foo: thing(), _foo?, foo: _foo! {
		}
		
		// shorthand for before:
		if foo in thing() {
		}
		
		if my_array.len > 0 {
			
		}
		
		//file2: file2_.string != nil or_ret file2_
	}
	
	{
		if !check_node(c, left, 0); return false
		
		info: check_node(c, left, 0) !: return nil
	}
}

#bar: proc() {
	// `as` keyword can be used to get to a more specific type
	{
		b: union{int, f32, bool}
		b_int: b.int!
		// b_int will be int. if it's not, a runtime assert will fail.
		
		c: union{int, f32, bool}
		c_f32: c.f32 !: return
		
		d: union{int, f32, bool}
		if d_f32 in d.f32 {
			...
		}
		
		e_maybe: d.f32
		f: d.int !: return
		
		if e in e_maybe {...}
		if e in d.f32 {...}
		
		g: d.bool // g will be ?bool
		
		if d_int in d.int {
		}
	}
	
	// with optional types:
	{
		foo: ?^int
		
		if foo_ptr in foo {
		}
		
		color: ?Color(nil)
		if color_known in color {
		}
		
		color = Color{50, 50, 20, 0} // assigning a direct value to an optional should be ok
		color = nil
		if color != Color{1, 2, 4, 5} { // as well as comparing it
		}
	}
	
	maybe_text: read_file("aaa.txt") // a will be ?string
	if text in maybe_text {...}
	
	if text in read_file("hello.txt") {
	}
	
	text: read_file("hello.txt") !: return
	// ...
}

/*
// everything makes total sense now! optional is like a slice,
// except with a maximum of one value.
// we should totally have optionals built-in.
// + you should be able to do i.e. if my_optional_int == 200 {...} just fine!

#read_file: proc(file: string) => ?string {
	if foo == nil {
	}
	return nil
}


if f in read_file("..") {
	print("file: ", f)
}

// the same thing should work with down-casting!

// if we have tagged union, maybe when you access a member it will be accessed as if it's an optional
weird_thing: union{bool, int}{int = 50}
if i in weird_thing.int {
	test(weird_thing)
}



foo: union{a: int, b: f32}
foo as a
if f as string in read_file("okay") {
}
f in read_file("okay")


*/



/*

if we were to have built-in optionals, i.e. ?^u32, ?int, which would be fine,
the question would be what about ?u32 or ?u8? Sized types are about requesting
a specific number of bits, so that promise should be held!
I guess it's also fine to just settle on a decision

@nil_value(nil_u32_hi)
#opt_u32_hi: struct {val: u32}
#nil_u32_hi: opt_u32_hi{0xFFFFFFFF}

@nil_value(nil_s32_hi)
#opt_s32_hi: struct {val: u32}
#nil_s32_hi: opt_s32_hi{0x7FFFFFFF}

@nil_value(opt_s32_lo)
#opt_s32_lo: struct {val: u32}
#opt_s32_lo: opt_s32_hi{0x80000000}

// Use the highest possible value as the nil value for `uint`
#opt_uint: struct{val: uint}
#nil_uint: opt_uint{0x_FFFFFFFF_FFFFFFFF}

// Use the highest possible value as the nil value for `int`
#opt_int: struct{val: int}
#nil_int: struct{0x_7FFFFFFF_FFFFFFFF}

// usage:
// foo: opt_u32_hi{50}
// if foo != nil_u32 { ... }

#opt_ptr: poly[T] struct{val: ^T}
#nil_ptr: poly[T] opt_ptr[T]{(^T)(0)}

#opt_bool: struct{val: bool}
#nil_bool: opt_bool{bool(0xff)}

// NOTE: there needs to be a difference between an empty slice and a nil slice.
// notice:
// foo: ^u8   // foo is not in the set of valid values for ^u8
// bar: []u8  // bar IS in the set of valid values for []u8
//
#opt_slice: poly[T] struct{val: []T}
#nil_slice: poly[T] opt_slice[T]{(^T)(0xffffffffffffffff), 0}

// usage:
// x: opt_ptr[int]{&test}
// if x != nil_ptr[int] {
//    x.val
// }

@nil_value(Vector3{})
#Vector3: struct {a: f32, b: f32, c: f32}

#test: proc(x: opt_slice[u32]) {
	x: opt_bool
	if x {
		x? = 50
	}
}
*/
