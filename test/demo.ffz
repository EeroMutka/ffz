#Basic: import(":Basic")

#Window: import(":Window")
#GL: import(":OpenGL")
#Draw2D: import(":Draw2D")

#Files: import(":Files")
#stbi: import(":vendor/stb/stb_image")

#Globals: struct {
	window: Window.Window
	window_size: [2]uint
	
	gl: GL.API
	draw_ctx: ^Draw2D.Context
	
	my_font: ^Draw2D.Font
	mursu: ^Draw2D.Texture(0)
}

@global
g: Globals(~~)

#draw_frame: proc {
	// we should provide a matrix to begin_drawing, to convert from pixel coordinates to normalized device coordinates
	// maybe a "source rectangle" that we map from that to [-1, +1]
	
	Draw2D.begin_drawing(g.draw_ctx, background: {120, 150, 190, 255},
		draw_area_rect: {min: {0., 0.}, max: {f32(g.window_size.x), f32(g.window_size.y)}})
	
	Draw2D.rect(g.draw_ctx, {{10., 10.}, {200., 200.}}, color: {255, 0, 100, 255}, texture: g.mursu)
	
	Draw2D.rect(g.draw_ctx, {{220., 220.}, {500., 500.}}, color: {255, 10, 255, 255}, texture: g.mursu)
	
	Draw2D.draw_text(g.draw_ctx, "Hello, sailor!", {200., 50.}, g.my_font, color: {255, 255, 255, 255})
	
	Draw2D.end_drawing(g.draw_ctx)
	
	if !GL.swap_buffers(g.window) {
		dbgbreak
	}
}

#my_resize_cb: Window.ResizeCallback {
	g.gl.Viewport(0, 0, s32(in.width), s32(in.height))
	draw_frame()
}

#MyArray: struct {
	a: int
	@using things: [3]int
	b: int
}

#entry: proc {
	aaa: 3 - 1 + 1 + 1 - 1
	
	temp: Basic.temp_push()
	
	// node_scope: new_heap_arena(parent_heap_scope)
	// 
	// do stuff
	// 
	// free_heap_arena(node_scope)
	
	foo: MyArray{20, {5, 6, 67}, 200}
	
	foo[1] = 423
	b: foo[2]
	
	Basic.print("hello!\n")
	g.window_size = {720, 720}
	g.window = Window.create(g.window_size.x, g.window_size.y, "My window")
	
	gl: &g.gl
	GL.load(gl, g.window, GL.Version._3_3)
	
	
	{
		g.draw_ctx = &Draw2D.init(gl, temp.arena)
		
		//font_data: Files.read_entire_file("C:/Windows/Fonts/consola.ttf", temp.arena)
		font_data: Files.read_entire_file("../roboto.ttf", temp.arena)
		Basic.assert(font_data.ok)
		
		atlas: Draw2D.make_font_atlas(temp.arena)
		g.my_font = Draw2D.add_ttf_font_from_data(atlas, font_data.data, 28., 0.)
		Draw2D.build_font_atlas(g.draw_ctx, atlas)
	}
	
	// load images
	// we need a read-entire-file procedure
	image_file: Files.read_entire_file("C:/Users/Eero/Pictures/MURS.png", temp.arena)
	Basic.assert(image_file.ok)
	
	
	width: s32(~~), height: s32(~~), channels_in_file: s32(~~)
	
	//stbi.set_flip_vertically_on_load(1)
	img_data: stbi.load_from_memory(image_file.data.ptr, s32(image_file.data.len),
		&width, &height, &channels_in_file, desired_channels: 4)
	
	if img_data == ^u8(0) {
		dbgbreak
	}
	
	mursu: Draw2D.make_texture_ex(g.draw_ctx, Draw2D.TextureFormat.RGBA8, u32(width), u32(height), img_data)
	g.mursu = &mursu
	
	// stbi.image_free(img_data)
	Window.show(g.window)
	
	i: 0
	
	for {
		events: Window.poll_events(g.window, my_resize_cb, ^raw(gl))
		
		if events.quit {
			break
		}
		
		draw_frame()
		
		i= . + 1
	}
}
