#Basic: import(":Basic")


#Window: import(":Window")
#GL: import(":OpenGL")
#Draw2D: import(":Draw2D/OpenGL")

#Files: import(":Files")
#stbi: import(":vendor/stb/stb_image")

#Globals: struct {
	window: Window.Window
	gl: GL.API
	canvas: Draw2D.Canvas
}

@*global
g: Globals(~~)

#draw: proc {
	Draw2D.clear_lists(&g.canvas)
	
	Draw2D.triangle(&g.canvas, {-0.5, -0.5}, {0.5, -0.5}, {0., 0.5}, color: {20, 102, 222, 255})
	Draw2D.rect(&g.canvas, {{-0.1, -0.1}, {0., 0.}}, color: {255, 102, 222, 255})
	
	Draw2D.draw_to_backend(&g.canvas, background: {20, 40, 20, 255})
	
	if !GL.swap_buffers(g.window) {dbgbreak}
}

#resize_cb: Window.ResizeCallback {
	g.gl.Viewport(0, 0, s32(in.width), s32(in.height))
	draw()
}

#entry: proc {
	Basic.print("hello!\n")
	g.window = Window.create(512, 512, "My window")
	
	gl: &g.gl
	GL.load(gl, g.window, GL.Version._3_3)
	
	g.canvas = Draw2D.init(gl, Basic.temp_arena())
	
	
	// load images
	// we need a read-entire-file procedure
	image_file: Files.read_entire_file("C:/Users/Eero/Pictures/avatar.png", Basic.temp_alc())
	Basic.assert(image_file.ok)
	
	
	width: s32(~~), height: s32(~~), channels_in_file: s32(~~)
	
	img_data: stbi.stbi_load_from_memory(image_file.data.ptr, s32(image_file.data.len),
		&width, &height, &channels_in_file, desired_channels: 0)
	// stbi.stbi_image_free(img_data)
	
	if img_data == ^u8(0) {
		dbgbreak
	}
	
	
	
	Window.show(g.window)
	
	i: 0
	
	quit: false
	for, !quit {
		events: Window.poll_events(g.window, resize_cb, ^raw(gl))
		
		if events.quit {
			quit = true
		}
		
		if !quit {
			draw()
		}
		
		i= . + 1
	}
}
