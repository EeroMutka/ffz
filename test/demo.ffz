#Basic: import(":Basic")
#Array: import(":Array")
#str: import(":String")

#Window: import(":Window")
#GL: import(":OpenGL")

// #RL: import(":vendor/raylib")

$link_library{"build/c_things.obj"}
#print_uint: @extern{} proc(x: uint)
#print_string: @extern{} proc(x: string)

// TODO:
// break, continue
// make the braces in extern{} not necessary
// make .slice[] not necessary for Arrays
// bring back TB

// anonymous struct and array literals?
// automatic slicing for array types? i.e. make this possible: []string({"hi", "bye"})
// 

// OpenGL + Win32
// keyboard / mouse input
// Goal #1: Basic 2D drawing library + demo app for it

// Goal #2: 3D chess game with OpenGL with no third-party dependencies, except
// cgltf, miniaudio, stbi, stbtt
// this game should include cool PBR graphics and sounds

// towards a 3D level editor / engine!!

// Example programs ideas:
// Ray tracer demo program
// Game of life
// Chess game, maybe even 3d? That would be pretty cool!
// tetris? breakout? pong? snake?


#WinMain: proc(hInstance: ^raw, hPrevInstance: ^raw, lpCmdLine: ^u8, nShowCmd: u32) => u32 {
	
	arena_base: ^u8(Basic.TiB(2))
	arena: Basic.arena_make_virtual_reserve_fixed(Basic.MiB(2), arena_base)
	temp: &arena.allocator
	
	window: Window.create(512, 512, "Hulabaloo", temp)
	
	// -----
	
	gl: GL.API
	GL.load(&gl, window, GL.Version._3_3)
	
	vao: GL.GLuint
	gl.GenVertexArrays(1, &vao)
	gl.BindVertexArray(vao)
	
	my_float: f32(0.25)
	my_float = 0.52
	
	Window.show(window)
	
	quit: false
	for, !quit {
		events: Window.poll_events(window)
		
		if events.quit {
			quit = true
		}
		else {
			// draw
			
			gl.BindVertexArray(vao)
			gl.ClearColor(.8, .0, .0, 1.)
			gl.Clear(GL.COLOR_BUFFER_BIT)
			
			if !GL.swap_buffers(window) {dbgbreak}
		}
	}
	
	ret 0
}
