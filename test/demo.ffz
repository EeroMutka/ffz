
#Basic: import(":Basic")
#Array: import(":Array")
#RL: import(":vendor/raylib")

#V2: [2]int

#window_size: uint(512)
#grid_size: uint(32)

// Check if two vectors are equal
#v2_eq: proc(a: V2, b: V2) => bool {
	ret a.x == b.x && a.y == b.y
}

// Add two vectors together
#v2_add: proc(a: V2, b: V2) => V2 {
	ret V2{a.x + b.x, a.y + b.y}
}

#random_grid_slot: proc() => V2 {
	ret V2{
		int(RL.GetRandomValue(0, s32(grid_size-1)))
		int(RL.GetRandomValue(0, s32(grid_size-1)))
	}
}

#Game: struct {
	snake: Array.Array[V2]
	
	apple_pos: V2{2, 2}
	
	lost: false
	
	snake_direction: V2{1, 0}
	
	score: uint(0) // how many apples you have eaten
	
	ticker: int(0)
}


#update: proc(game: ^Game) {
	snake: &game.snake
	if game.lost {
		ret
	}
	
	input: V2{0, 0}
	if RL.IsKeyPressed(RL.KeyboardKey.RIGHT) && game.snake_direction.x == 0 {
		input = V2{1, 0}
	}
	if RL.IsKeyPressed(RL.KeyboardKey.LEFT) && game.snake_direction.x == 0 {
		input = V2{-1, 0}
	}
	if RL.IsKeyPressed(RL.KeyboardKey.UP) && game.snake_direction.y == 0 {
		input = V2{0, -1}
	}
	if RL.IsKeyPressed(RL.KeyboardKey.DOWN) && game.snake_direction.y == 0 {
		input = V2{0, 1}
	}
	
	if !v2_eq(input, V2{0, 0}) && !v2_eq(input, game.snake_direction) {
		game.ticker = 0 // apply input instantly
	}
	
	if game.ticker <= 0 {
		game.ticker = 8
		
		if !v2_eq(input, V2{0, 0}) {
			game.snake_direction = input
		}
		
		// eat the apple if the head is at the apple
		eat_apple: v2_eq(snake[0], game.apple_pos)
		if eat_apple {
			Array.insert[V2](snake, 0, snake[0])
			game.score = .+1
		}
		else {
			// move all segments (except the head) towards the head
			for i: int(snake.len) - 1, i > 0, i= .-1 {
				if !v2_eq(snake[i], snake[i-1]) {
					snake[i] = snake[i-1]
				}
			}
		}
		
		snake[0] = v2_add(., game.snake_direction) // move the head forward
		
		// wrap around the world
		{
			if snake[0].x < 0 {
				snake[0].x = grid_size - 1
			}
			if snake[0].y < 0 {
				snake[0].y = grid_size - 1
			}
			if snake[0].x >= grid_size {
				snake[0].x = 0
			}
			if snake[0].y >= grid_size {
				snake[0].y = 0
			}
		}
		
		if eat_apple {
			// Move the apple to a random grid slot that does not overlap with the snake
			
			for apple_pos_ok: false, !apple_pos_ok, {
				game.apple_pos = random_grid_slot()
				apple_pos_ok = true
				
				for i: 1, i < snake.len, i= .+1 {
					if v2_eq(game.apple_pos, snake[i]) {
						apple_pos_ok = false
					}
				}
			}
		}
		
		// if you hit yourself, lose
		for i: 1, i < snake.len, i= .+1 {
			if v2_eq(snake[0], snake[i]) {
				game.lost = true
			}
		}
	}
	
	game.ticker= . - 1
}

#draw: proc(game: ^Game) {
	RL.BeginDrawing()
	
	tile_size_pixels: window_size / grid_size
	
	RL.ClearBackground(RL.Color{200, 200, 200, 255})
	
	for y: 0, y < grid_size, y= y + 1 {
		for x: 0, x < grid_size, x= x + 1 {
			RL.DrawRectangle(
				s32(x * tile_size_pixels)
				s32(y * tile_size_pixels)
				s32(tile_size_pixels - 2)
				s32(tile_size_pixels - 2)
				RL.Color{190, 190, 190, 255})
		}
	}
		
	// draw apple
	RL.DrawRectangle(
		s32(game.apple_pos.x * tile_size_pixels)
		s32(game.apple_pos.y * tile_size_pixels)
		s32(tile_size_pixels-2)
		s32(tile_size_pixels-2)
		RL.Color{240, 250, 100, 255})
	
	// draw snake
	for i: 0, i < game.snake.len, i= .+1 {
		coord: game.snake[i]
		
		color: RL.Color{240, 80, 15, 255}
		if i % 4 == 0 {
			color = RL.Color{80, 250, 50, 255}
		}
		
		RL.DrawRectangle(
			s32(coord.x * tile_size_pixels)
			s32(coord.y * tile_size_pixels)
			s32(tile_size_pixels-2)
			s32(tile_size_pixels-2)
			color)
	}
	
	{
		// Draw eyes
		eye_offset: [2]s32{3, 5}
		pupil_offset: [2]s32{3 + 2*s32(game.snake_direction.x), 6 + 2*s32(game.snake_direction.y)}
		head: game.snake[0]
		
		RL.DrawCircle(s32(head.x * tile_size_pixels) + eye_offset.x, s32(head.y * tile_size_pixels) + eye_offset.y, 5.0, RL.Color{255, 255, 255, 255})
		RL.DrawCircle(s32(head.x * tile_size_pixels) + pupil_offset.x, s32(head.y * tile_size_pixels) + pupil_offset.y, 3.0, RL.Color{0, 0, 0, 255})
		
		RL.DrawCircle(s32(head.x * tile_size_pixels) + eye_offset.x + 11, s32(head.y * tile_size_pixels) + eye_offset.y, 5.0, RL.Color{255, 255, 255, 255})
		RL.DrawCircle(s32(head.x * tile_size_pixels) + pupil_offset.x + 11, s32(head.y * tile_size_pixels) + pupil_offset.y, 3.0, RL.Color{0, 0, 0, 255})
	}
	
	if game.lost {
		RL.DrawText("GAME LOST!\0".ptr, 190, 5, 30, RL.Color{255, 0, 0, 220})
	}
	
	RL.EndDrawing()
}

#entry: proc() {
	// init raylib
	RL.InitWindow(s32(window_size), s32(window_size), "Hello".ptr)
	
	RL.SetRandomSeed(100)
	
	game: Game{
		snake: Array.make[V2](Basic.temp_alc())
	}
	
	Array.push[V2](&game.snake, V2{5, 5})
	
	RL.SetTargetFPS(60)
	
	// main loop
	for, !RL.WindowShouldClose() {
		update(&game)
		draw(&game)
	}
}