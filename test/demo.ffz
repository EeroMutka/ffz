//#Basic: import(":Basic")

// #RL: import(":vendor/raylib")


//@|global
//a: int

// @|extern
// @|sys_extern
//b: f32

// TODO:
// ffz_entry
// | for built-in keywords
// make the braces in extern{} not necessary

// temp allocator
// break, continue
// make .slice[] not necessary for Arrays
// bring back TB

// anonymous struct and array literals?
// automatic slicing for array types? i.e. make this possible: []string({"hi", "bye"})

// OpenGL + Win32
// keyboard / mouse input
// Goal #1: Basic 2D drawing library + demo app for it

// Goal #2: 3D chess game with OpenGL with no third-party dependencies, except
// cgltf, miniaudio, stbi, stbtt
// this game should include cool PBR graphics and sounds

// towards a 3D level editor / engine!!

// Example programs ideas:
// Ray tracer demo program
// Game of life
// Chess game, maybe even 3d? That would be pretty cool!
// tetris? breakout? pong? snake?

//@|thread_local
//temp_arena: int

#c_things: |extern{"build/c_things.obj"}
#print_uint: @c_things proc(x: uint)

#ffz_entry: proc() {
	//arena_base: ^u8(Basic.TiB(2))
	//arena: Basic.arena_make_virtual_reserve_fixed(Basic.MiB(2), arena_base)
	//temp: &arena.allocator
	//dbgbreak
	dbgbreak
	dbgbreak
	dbgbreak
}
