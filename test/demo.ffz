
#Basic: import(":Basic")
//#Array: import(":Array")
//#str: import(":String")

#Window: import(":Window")
#GL: import(":OpenGL")
#Draw2D: import(":Draw2D/OpenGL")


@*global
globals: struct {
	window: Window.Window
	gl: GL.API
	canvas: Draw2D.Canvas
}(~~)


#draw: proc {
	// build draw list
	Draw2D.clear(&globals.canvas)
	
	//Draw2D.rect(&globals.canvas, Draw2D.Rect{[2]f32{1., 2.}, [2]f32{5., 6.}}, Draw2D.Color{255, 0, 0, 255})
	Draw2D.triangle(&globals.canvas, [2]f32{-0.5, -0.5}, [2]f32{0.5, -0.5}, [2]f32{0., 0.5}, Draw2D.Color{255, 0, 0, 255})
	
	// TODO:
	// globals.canvas'rect({{1., 2.}, {5., 6.}}, color: {255, 0, 0, 255})
	
	globals.gl.ClearColor(.3, .2, .4, 1.)
	globals.gl.Clear(GL.COLOR_BUFFER_BIT)
	
	Draw2D.draw_to_backend(&globals.canvas)
	
	if !GL.swap_buffers(globals.window) {dbgbreak}
}

#resize_cb: Window.ResizeCallback {
	//globals.gl.Viewport(0, 0, s32(in.width), s32(in.height))
	//draw()
}

#entry: proc {
	Basic.print("hello!\n")
	globals.window = Window.create(512, 512, "My window")
	
	gl: &globals.gl
	GL.load(gl, globals.window, GL.Version._3_3)
	
	globals.canvas = Draw2D.init(gl, Basic.temp_arena())
	
	Window.show(globals.window)
	
	i: 0
	
	
	quit: false
	for, !quit {
		events: Window.poll_events(globals.window, resize_cb, ^raw(gl))
		
		if events.quit {
			quit = true
		}
		
		if !quit {
			draw()
		}
		
		i= . + 1
	}
}
