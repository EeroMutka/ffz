//#B: import("../modules/basic")
//#Arr: import("../modules/Array")


// link crt startup
@link_system_library: "libcmt.lib"

#foo: proc() => (bool) {
	dbgbreak
	dbgbreak
	ret true
}

#bar: proc() => (bool) {
	dbgbreak
	dbgbreak
	ret true
}


#assert: proc(condition: bool) {
	dbgbreak
	//if !condition {
	//	dbgbreak
	//}
}

void main(int $r1, int $r2, int $r3) {
	i8 $r1[64]; i32 $r2; i32 $r3; bool $r4; i32 $r4; i32 $r5; bool $r6; i32 $r7;
$B0:
	$r10 = 0;
	if (false) goto $B1; else goto $B2;
$B1:
	$r2 = $r1;
	goto $B3;
$B2:
	$r1 = 3
	goto $B3;
$B3:
}

#main: proc() {
//	$r2 = phi(L1.r1, L2.r3)
	
	
	
	//$r2 = PHI($r0, $r1)
	
	assert(false)
	/*
	
	arena_base: (^u8)(B.TiB(2))
	arena: B.arena_make_virtual_reserve_fixed(B.MiB(2), arena_base)
	
	arr: Arr.make[int](&arena.allocator)
	Arr.push[int](&arr, 3)
	Arr.push[int](&arr, 4)
	Arr.push[int](&arr, 5)
	*/
	//adder[int](1, 2)
	//adder_int(50, 60)
	
	/*for i: 0, i<64, i=.+1 {
		B.f_os_print_color("hoi ", B.fConsoleAttributeFlags(B.fConsoleAttribute.Green))
	}
	*/
	dbgbreak
}


