// hmm. I'm not sure if this should go inside the Basic module, as Basic/Array.
// I guess that depends on whether anything inside Basic requires an array implementation.

#Basic: import(":Basic")

// TODO: @alias_module_name

#Array: struct[T] {
	@*using slice: []T
	capacity: uint
	allocator: ^Basic.Allocator
}

#make: proc[T](allocator: ^Basic.Allocator) => Array[T] {
	a: Array[T]
	a.allocator= allocator
	
	ret a
}

#free: proc[T](a: ^Array[T]) {
	foo: []raw
	a.allocator._proc(a.allocator, a.ptr, a.capacity*size_of(T), 0, 0)
}

#push: proc[T](a: ^Array[T], elem: T) => uint {
	ret push_n_raw(^Array[raw](a), &elem, 1, size_of(T), align_of(T))
}

#push_n: proc[T](a: ^Array[T], elems: []T) => uint {
	ret push_n_raw(^Array[raw](a), elems.ptr, elems.len, size_of(T), align_of(T))
}

#insert: proc[T](a: ^Array[T], at: uint, elem: T) {
	insert_n_raw(^Array[raw](a), at, &elem, 1, size_of(T), align_of(T))
}

#insert_n: proc[T](a: ^Array[T], at: uint, elems: []T) {
	insert_n_raw(^Array[raw](a), at, elems.ptr, elems.len, size_of(T), align_of(T))
}

// reverse?

// --
// Raw array utilities - these are useful if you don't know the element type statically.
// --

#push_n_raw: proc(a: ^Array[raw], elems: ^raw, n: uint, elem_size: uint, elem_align: uint) => uint {
	reserve_raw(a, a.len + n, elem_size, elem_align)
	
	Basic.mem_move(^raw(uint(a.ptr) + elem_size * a.len), elems, elem_size * n)
	
	out: a.len
	a.len= .+n
	ret out
}

#reserve_raw: proc(a: ^Array[raw], capacity: uint, elem_size: uint, elem_align: uint) {
	if (capacity > a.capacity) {
		// the + 7 is to make us start off with 8 elements the first time we're appending to an array
		new_capacity: Basic.round_up_to_power_of_2(capacity + 7)
		
		if (a.allocator == ^Basic.Allocator(0)) {
			dbgbreak // did you forget to call Array.make?
		}
		
		a.ptr= a.allocator._proc(a.allocator, a.ptr, a.capacity*elem_size, new_capacity*elem_size, elem_align)
		a.capacity= new_capacity
	}
}

#insert_n_raw: proc(a: ^Array[raw], at: uint, elem: ^raw, n: uint, elem_size: uint, elem_align: uint) {
	reserve_raw(a, a.len + n, elem_size, elem_align)
	
	// Move existing elements forward
	offset: uint(a.ptr) + at * elem_size
	Basic.mem_move(^raw(offset + n * elem_size), ^raw(offset), (a.len - at) * elem_size)
	
	Basic.mem_move(^raw(offset), elem, n * elem_size)
	a.len = .+n
}
