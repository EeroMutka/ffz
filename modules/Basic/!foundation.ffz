// This file was generated by library_translator.

// https://learn.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features?view=msvc-170
//@link_system_library: "libucrt.lib"
$link_library{"foundation.obj"}

#f32: u32
#f64: u64



#rune: s32

#uint_pow2: uint


#fAllocator: struct {
	_proc: proc(allocator: ^fAllocator, old_ptr: ^u8, old_size: uint, new_size: uint, new_alignment: uint_pow2) => (^u8)
}

#fArenaMode: enum, u32 {
	VirtualReserveFixed: 0
	UsingBufferFixed: 1
	UsingAllocatorGrowing: 2
}

#fArenaDesc: struct {
	mode: fArenaMode
	VirtualReserveFixed: struct {
		reserve_base: ^u8
		reserve_size: uint
	}
	UsingBufferFixed: struct {
		base: ^u8
		size: uint
	}
	UsingAllocatorGrowing: struct {
		min_block_size: u32
		a: ^fAllocator
	}
}

#fArenaBlock: struct {
	size_including_header: uint
	next: ^fArenaBlock
}

#fArenaPosition: struct {
	head: ^u8
	current_block: ^fArenaBlock
}

#fArena: struct {
	alc: fAllocator
	desc: fArenaDesc
	committed_end: ^u8
	pos: fArenaPosition
}

#fSliceRaw: struct {
	data: ^u8
	len: uint
}

#fArrayRaw: struct {
	capacity: uint
	alc: ^fAllocator
}

#fTick: struct {
	nsec: s64
}

#fDynamicLibrary: struct {
	handle: ^u8
}

#fFileOpenMode: enum, u32 {
	Read: 0
	Write: 1
	Append: 2
}

#fFile: struct {
	_handle: ^u8
}

#fMap64Raw: struct {
	alc: ^fAllocator
	value_size: u32
	alive_count: u32
	slot_count: u32
	slot_count_log2: u32
	slots: ^u8
}

#fLeakTrackerCallstackEntry: struct {
	file: string
	line: u32
}

#fLeakTracker_Entry: struct {
	callstack: fArrayRaw
}

#fLeakTracker: struct {
	active: bool
	internal_arena: ^fArena
	active_allocations: fMap64Raw
	file_names_cache: fMap64Raw
}

#fConsoleAttribute: enum, u32 {
	Blue: 1
	Green: 2
	Red: 4
	Intensify: 8
}

#fConsoleAttributeFlags: s32

#fMapInsert: enum, u32 {
	AssertUnique: 0
	DoNotOverride: 1
	Override: 2
}

#fMapInsertResult: struct {
	_unstable_ptr: ^u8
	added: bool
}

#fVisitDirectoryInfo: struct {
	name: string
	is_directory: bool
}

#fVisitDirectoryResult: enum, u32 {
	fVisitDirectoryResult_Continue: 0
}

#fVisitDirectoryVisitor: proc(info: ^fVisitDirectoryInfo, userptr: ^u8) => (fVisitDirectoryResult)

#fRangeUint: struct {
	lo: uint
	hi: uint
}

#f_get_stack_trace: @extern{} proc(visitor: proc(function: string, file: string, line: u32, user_ptr: ^u8), user_ptr: ^u8)

#f_leak_tracker_init: @extern{} proc

#f_leak_tracker_deinit: @extern{} proc

#f_leak_tracker_begin_entry: @extern{} proc(address: ^u8, skip_stackframes_count: uint)

#f_leak_tracker_assert_is_alive: @extern{} proc(address: ^u8)

#f_leak_tracker_end_entry: @extern{} proc(address: ^u8)

#f_temp_push: @extern{} proc => (^fAllocator)

#f_temp_pop: @extern{} proc

#f_temp_init: @extern{} proc

#f_temp_deinit: @extern{} proc

#f_arena_make: @extern{} proc(min_block_size: u32, a: ^fAllocator) => (^fArena)

#f_arena_make_virtual_reserve_fixed: @extern{} proc(reserve_size: uint, reserve_base: ^u8) => (^fArena)

#f_arena_make_buffer_fixed: @extern{} proc(base: ^u8, size: uint) => (^fArena)

#f_arena_make_ex: @extern{} proc(desc: fArenaDesc) => (^fArena)

#f_arena_free: @extern{} proc(arena: ^fArena)

#f_arena_push: @extern{} proc(arena: ^fArena, size: uint, alignment: uint_pow2) => (string)

#f_arena_push_str: @extern{} proc(arena: ^fArena, data: string, alignment: uint_pow2) => (^u8)

#f_arena_get_contiguous_base: @extern{} proc(arena: ^fArena) => (^u8)

#f_arena_get_contiguous_cursor: @extern{} proc(arena: ^fArena) => (uint)

#f_arena_get_pos: @extern{} proc(arena: ^fArena) => (fArenaPosition)

#f_arena_pop_to: @extern{} proc(arena: ^fArena, pos: fArenaPosition)

#f_arena_clear: @extern{} proc(arena: ^fArena)

#f_next_pow_of_2: @extern{} proc(v: uint) => (uint_pow2)

#f_map64_make_raw: @extern{} proc(value_size: u32, a: ^fAllocator) => (fMap64Raw)

#f_make_map64_cap_raw: @extern{} proc(value_size: u32, capacity: uint_pow2, a: ^fAllocator) => (fMap64Raw)

#f_map64_free_raw: @extern{} proc(map: ^fMap64Raw)

#f_map64_resize_raw: @extern{} proc(map: ^fMap64Raw, slot_count_log2: u32)

#f_map64_insert_raw: @extern{} proc(map: ^fMap64Raw, key: u64, value: ^u8, mode: fMapInsert) => (fMapInsertResult)

#f_map64_remove_raw: @extern{} proc(map: ^fMap64Raw, key: u64) => (bool)

#f_map64_get_raw: @extern{} proc(map: ^fMap64Raw, key: u64) => (^u8)

#f_mem_copy: @extern{} proc(dst: ^u8, src: ^u8, size: uint)

#f_array_make_raw: @extern{} proc(a: ^fAllocator) => (fArrayRaw)

#f_array_make_len_raw: @extern{} proc(elem_size: u32, len: uint, initial_value: ^u8, a: ^fAllocator) => (fArrayRaw)

#f_array_make_len_garbage_raw: @extern{} proc(elem_size: u32, len: uint, a: ^fAllocator) => (fArrayRaw)

#f_array_make_cap_raw: @extern{} proc(elem_size: u32, capacity: uint, a: ^fAllocator) => (fArrayRaw)

#f_array_free_raw: @extern{} proc(array: ^fArrayRaw, elem_size: u32)

#f_array_push_raw: @extern{} proc(array: ^fArrayRaw, elem: ^u8, elem_size: u32, elem_align: u32) => (uint)

#f_array_push_slice_raw: @extern{} proc(array: ^fArrayRaw, elems: fSliceRaw, elem_size: u32, elem_align: u32)

#f_array_pop_raw: @extern{} proc(array: ^fArrayRaw, out_elem: ^u8, elem_size: u32)

#f_array_reserve_raw: @extern{} proc(array: ^fArrayRaw, capacity: uint, elem_size: u32)

#f_array_resize_raw: @extern{} proc(array: ^fArrayRaw, len: uint, value: ^u8, elem_size: u32)

#f_read_cycle_counter: @extern{} proc => (u64)

#f_sleep_milliseconds: @extern{} proc(ms: s64)

#f_os_print: @extern{} proc(str: string)

#f_os_print_color: @extern{} proc(str: string, attributes_mask: fConsoleAttributeFlags)

#f_os_run_command: @extern{} proc(args: fSliceRaw, working_dir: string, out_exit_code: ^u32) => (bool)

#f_os_set_working_dir: @extern{} proc(dir: string) => (bool)

#f_os_get_working_dir: @extern{} proc(allocator: ^fAllocator) => (string)

#f_os_error_popup: @extern{} proc(title: string, message: string)

#f_mem_reserve: @extern{} proc(size: u64, address: ^u8) => (^u8)

#f_mem_commit: @extern{} proc(ptr: ^u8, size: u64)

#f_mem_decommit: @extern{} proc(ptr: ^u8, size: u64)

#f_mem_release: @extern{} proc(ptr: ^u8)

#f_round_tos64: @extern{} proc(x: f32) => (s64)

#f_floor_tos64: @extern{} proc(x: f32) => (s64)

#f_hash64_str_ex: @extern{} proc(s: string, seed: u64) => (u64)

#f_str_format: @extern{} proc(a: ^fAllocator, fmt: ^u8) => (string)

#f_str_print: @extern{} proc(buffer: ^fArrayRaw, str: string)

#f_str_print_rune: @extern{} proc(buffer: ^fArrayRaw, r: rune)

#f_str_print_repeat: @extern{} proc(buffer: ^fArrayRaw, str: string, count: uint)

#f_str_printf: @extern{} proc(buffer: ^fArrayRaw, fmt: ^u8)

#f_str_advance: @extern{} proc(str: ^string, len: uint) => (string)

#f_str_clone: @extern{} proc(str: string, allocator: ^fAllocator) => (string)

#f_str_copy: @extern{} proc(dst: string, src: string)

#f_str_path_stem: @extern{} proc(path: string) => (string)

#f_str_path_extension: @extern{} proc(path: string) => (string)

#f_str_path_tail: @extern{} proc(path: string) => (string)

#f_str_path_dir: @extern{} proc(path: string) => (string)

#f_str_last_index_of_any_char: @extern{} proc(str: string, chars: string, out_index: ^uint) => (bool)

#f_str_contains: @extern{} proc(str: string, substr: string) => (bool)

#f_str_find_substring: @extern{} proc(str: string, substr: string, out_index: ^uint) => (bool)

#f_str_replace: @extern{} proc(str: string, search_for: string, replace_with: string, a: ^fAllocator) => (string)

#f_str_replace_multi: @extern{} proc(str: string, search_for: fSliceRaw, replace_with: fSliceRaw, a: ^fAllocator) => (string)

#f_str_to_lower: @extern{} proc(str: string, a: ^fAllocator) => (string)

#f_str_rune_to_lower: @extern{} proc(r: rune) => (rune)

#f_str_ends_with: @extern{} proc(str: string, end: string) => (bool)

#f_str_starts_with: @extern{} proc(str: string, start: string) => (bool)

#f_str_cut_end: @extern{} proc(str: string, end: string) => (string)

#f_str_cut_start: @extern{} proc(str: string, start: string) => (string)

#f_str_split_i: @extern{} proc(str: string, character: u8, a: ^fAllocator, out: ^fSliceRaw)

#f_str_join: @extern{} proc(a: ^fAllocator, args: fSliceRaw) => (string)

#f_str_equals: @extern{} proc(a: string, b: string) => (bool)

#f_str_equals_nocase: @extern{} proc(a: string, b: string) => (bool)

#f_str_slice: @extern{} proc(str: string, lo: uint, hi: uint) => (string)

#f_str_slice_before: @extern{} proc(str: string, mid: uint) => (string)

#f_str_slice_after: @extern{} proc(str: string, mid: uint) => (string)

#f_str_tou64: @extern{} proc(s: string, radix: u32, out_value: ^u64) => (bool)

#f_str_tos64: @extern{} proc(s: string, radix: u32, out_value: ^s64) => (bool)

#f_str_tof64: @extern{} proc(s: string, out: ^f64) => (bool)

#f_str_fromuint: @extern{} proc(bytes: string, a: ^fAllocator) => (string)

#f_str_from_int: @extern{} proc(bytes: string, a: ^fAllocator) => (string)

#f_str_from_float: @extern{} proc(bytes: string, a: ^fAllocator) => (string)

#f_str_from_float_ex: @extern{} proc(bytes: string, num_decimals: s32, a: ^fAllocator) => (string)

#f_str_to_cstr: @extern{} proc(s: string, a: ^fAllocator) => (^u8)

#f_str_from_cstr: @extern{} proc(s: ^u8) => (string)

#f_str_to_utf16: @extern{} proc(str: string, num_null_terminations: uint, a: ^fAllocator, out_len: ^uint) => (^u16)

#f_str_from_utf16: @extern{} proc(str_utf16: ^u16, a: ^fAllocator) => (string)

#f_str_encode_rune: @extern{} proc(output: ^u8, r: rune) => (uint)

#f_str_next_rune: @extern{} proc(str: string, byteoffset: ^uint) => (rune)

#f_str_prev_rune: @extern{} proc(str: string, byteoffset: ^uint) => (rune)

#f_str_rune_count: @extern{} proc(str: string) => (uint)

#f_os_clipboard_get_text: @extern{} proc(allocator: ^fAllocator) => (string)

#f_os_clipboard_set_text: @extern{} proc(str: string)

#f_dynamic_library_load: @extern{} proc(filepath: string) => (fDynamicLibrary)

#f_dynamic_library_unload: @extern{} proc(dll: fDynamicLibrary) => (bool)

#f_dynamic_library_sym_address: @extern{} proc(dll: fDynamicLibrary, symbol: string) => (^u8)

#f_files_path_is_absolute: @extern{} proc(path: string) => (bool)

#f_files_path_to_absolute: @extern{} proc(working_dir: string, path: string, a: ^fAllocator) => (string)

#f_files_visit_directory: @extern{} proc(path: string, visitor: fVisitDirectoryVisitor, visitor_userptr: ^u8) => (bool)

#f_files_directory_exists: @extern{} proc(path: string) => (bool)

#f_files_delete_directory: @extern{} proc(path: string) => (bool)

#f_files_make_directory: @extern{} proc(path: string) => (bool)

#f_files_read_whole: @extern{} proc(filepath: string, allocator: ^fAllocator, out_str: ^string) => (bool)

#f_files_write_whole: @extern{} proc(filepath: string, data: string) => (bool)

#f_files_open: @extern{} proc(filepath: string, mode: fFileOpenMode) => (fFile)

#f_files_exists: @extern{} proc(file: fFile) => (bool)

#f_files_close: @extern{} proc(file: fFile) => (bool)

#f_files_size: @extern{} proc(file: fFile) => (uint)

#f_files_read: @extern{} proc(file: fFile, dst: ^u8, size: uint) => (uint)

#f_files_write: @extern{} proc(file: fFile, data: string) => (bool)

#f_files_get_position: @extern{} proc(file: fFile) => (uint)

#f_files_set_position: @extern{} proc(file: fFile, position: uint) => (bool)

#f_files_get_modtime: @extern{} proc(filepath: string) => (u64)

#f_files_clone: @extern{} proc(src_filepath: string, dst_filepath: string) => (bool)

#f_files_delete: @extern{} proc(filepath: string) => (bool)

#f_files_pick_file_dialog: @extern{} proc(allocator: ^fAllocator) => (string)

#f_get_tick: @extern{} proc => (fTick)

#f_randomu32: @extern{} proc => (u32)

#f_randomu64: @extern{} proc => (u64)

#f_random_float_in_range: @extern{} proc(minimum: f32, maximum: f32) => (f32)

