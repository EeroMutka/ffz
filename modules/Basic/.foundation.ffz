// This file was generated by library_translator.

@link_library: "foundation.obj"

#f32: u32
#f64: u64



#rune: s32

#uint_pow2: uint


#Allocator: struct {
	_proc: proc(allocator: ^Allocator, old_ptr: ^u8, old_size: uint, new_size: uint, new_alignment: uint_pow2) => (^u8)
}

#ArenaMode: enum, u32 {
	VirtualReserveFixed: 0
	UsingBufferFixed: 1
	UsingAllocatorGrowing: 2
}

#ArenaDesc: struct {
	mode: ArenaMode
	VirtualReserveFixed: struct {
		reserve_base: ^u8
		reserve_size: uint
	}
	UsingBufferFixed: struct {
		base: ^u8
		size: uint
	}
	UsingAllocatorGrowing: struct {
		min_block_size: u32
		a: ^Allocator
	}
}

#ArenaBlockHeader: struct {
	size_including_header: uint
	next: ^ArenaBlockHeader
}

#ArenaPosition: struct {
	head: ^u8
	current_block: ^ArenaBlockHeader
}

#Arena: struct {
	alc: Allocator
	desc: ArenaDesc
	committed_end: ^u8
	pos: ArenaPosition
}

#Heap: struct {
	alc: Allocator
	backing_arena: ^Arena
}

#ArrayRaw: struct {
	data: ^u8
	len: uint
	capacity: uint
	alc: ^Allocator
}

#SliceRaw: struct {
	data: ^u8
	len: uint
}

#Tick: s64

#OS_DynamicLibrary: struct {
	handle: ^u8
}

#OS_FileOpenMode: enum, u32 {
	Read: 0
	Write: 1
	Append: 2
}

#File: struct {
	_handle: ^u8
}

#SlotArrayHandle: struct {
	gen: u32
}

#Map64Raw: struct {
	alc: ^Allocator
	value_size: u32
	alive_count: u32
	slot_count: u32
	slot_count_log2: u32
	slots: ^u8
}

#LeakTrackerCallstackEntry: struct {
	file: string
	line: u32
}

#LeakTracker_Entry: struct {
	callstack: ArrayRaw
}

#LeakTracker: struct {
	active: bool
	internal_arena: ^Arena
	active_allocations: Map64Raw
	file_names_cache: Map64Raw
}

#ConsoleAttribute: enum, u32 {
	Blue: 1
	Green: 2
	Red: 4
	Intensify: 8
}

#ConsoleAttributeFlags: s32

#MapInsert: enum, u32 {
	AssertUnique: 0
	DoNotOverride: 1
	Override: 2
}

#MapInsertResult: struct {
	value: ^u8
	added: bool
}

#OS_VisitDirectoryInfo: struct {
	name: string
	is_directory: bool
}

#OS_VisitDirectoryResult: enum, u32 {
	OS_VisitDirectoryResult_Continue: 0
}

#OS_VisitDirectoryVisitor: proc(info: ^OS_VisitDirectoryInfo, userptr: ^u8) => (OS_VisitDirectoryResult)

#RangeUint: struct {
	lo: uint
	hi: uint
}

#mem_clone_size: @extern proc(size: uint, value: ^u8, allocator: ^Allocator) => (^u8)

// TODO: #get_stack_trace @extern proc(visitor: proc(function: string, file: string, line: u32, user_ptr: ^u8), user_ptr: ^u8)

#leak_tracker_init: @extern proc

#leak_tracker_deinit: @extern proc

#leak_tracker_begin_entry: @extern proc(address: ^u8, skip_stackframes_count: uint)

#leak_tracker_assert_is_alive: @extern proc(address: ^u8)

#leak_tracker_end_entry: @extern proc(address: ^u8)

#temp_push: @extern proc => (^Allocator)

#temp_pop: @extern proc

#temp_init: @extern proc

#temp_deinit: @extern proc

#arena_make: @extern proc(min_block_size: u32, a: ^Allocator) => (^Arena)

#arena_make_virtual_reserve_fixed: @extern proc(reserve_size: uint, reserve_base: ^u8) => (^Arena)

#arena_make_using_buffer_fixed: @extern proc(base: ^u8, size: uint) => (^Arena)

#arena_make_ex: @extern proc(desc: ArenaDesc) => (^Arena)

#arena_free: @extern proc(arena: ^Arena)

#make_heap: @extern proc(backing_arena_desc: ArenaDesc) => (^Heap)

#arena_push_size: @extern proc(arena: ^Arena, size: uint, alignment: uint_pow2) => (string)

#arena_push: @extern proc(arena: ^Arena, data: string, alignment: uint_pow2) => (^u8)

#arena_get_base_contiguous: @extern proc(arena: ^Arena) => (^u8)

#arena_get_cursor: @extern proc(arena: ^Arena) => (uint)

#arena_get_pos: @extern proc(arena: ^Arena) => (ArenaPosition)

#arena_pop_to: @extern proc(arena: ^Arena, pos: ArenaPosition)

#arena_clear: @extern proc(arena: ^Arena)

#next_pow_of_2: @extern proc(v: uint) => (uint_pow2)

#map64_make_raw: @extern proc(value_size: u32, a: ^Allocator) => (Map64Raw)

#make_map64_cap_raw: @extern proc(value_size: u32, capacity: uint_pow2, a: ^Allocator) => (Map64Raw)

#free_map64_raw: @extern proc(map: ^Map64Raw)

#resize_map64_raw: @extern proc(map: ^Map64Raw, slot_count_log2: u32)

#map64_insert_raw: @extern proc(map: ^Map64Raw, key: u64, value: ^u8, mode: MapInsert) => (MapInsertResult)

#map64_remove_raw: @extern proc(map: ^Map64Raw, key: u64) => (bool)

#map64_get_raw: @extern proc(map: ^Map64Raw, key: u64) => (^u8)

#mem_copy: @extern proc(dst: ^u8, src: ^u8, size: uint)

#make_array_raw: @extern proc(a: ^Allocator) => (ArrayRaw)

#make_array_len_raw: @extern proc(elem_size: u32, len: uint, initial_value: ^u8, a: ^Allocator) => (ArrayRaw)

#make_array_len_garbage_raw: @extern proc(elem_size: u32, len: uint, a: ^Allocator) => (ArrayRaw)

#make_array_cap_raw: @extern proc(elem_size: u32, capacity: uint, a: ^Allocator) => (ArrayRaw)

#free_array_raw: @extern proc(array: ^ArrayRaw, elem_size: u32)

#array_push_raw: @extern proc(array: ^ArrayRaw, elem: ^u8, elem_size: u32) => (uint)

#array_push_slice_raw: @extern proc(array: ^ArrayRaw, elems: SliceRaw, elem_size: u32)

#array_pop_raw: @extern proc(array: ^ArrayRaw, out_elem: ^u8, elem_size: u32)

#array_reserve_raw: @extern proc(array: ^ArrayRaw, capacity: uint, elem_size: u32)

#array_resize_raw: @extern proc(array: ^ArrayRaw, len: uint, value: ^u8, elem_size: u32)

#os_read_cycle_counter: @extern proc => (u64)

#os_sleep_milliseconds: @extern proc(ms: s64)

#os_print: @extern proc(str: string)

#os_print_colored: @extern proc(str: string, attributes_mask: ConsoleAttributeFlags)

#os_run_command: @extern proc(args: SliceRaw, working_dir: string, out_exit_code: ^u32) => (bool)

#os_set_working_dir: @extern proc(dir: string) => (bool)

#os_get_working_dir: @extern proc(allocator: ^Allocator) => (string)

#os_error_message: @extern proc(title: string, message: string)

#os_mem_reserve: @extern proc(size: u64, address: ^u8) => (^u8)

#os_mem_commit: @extern proc(ptr: ^u8, size: u64)

#os_mem_decommit: @extern proc(ptr: ^u8, size: u64)

#os_mem_release: @extern proc(ptr: ^u8)

#round_tos64: @extern proc(x: f32) => (s64)

#floor_tos64: @extern proc(x: f32) => (s64)

#str_format: @extern proc(a: ^Allocator, fmt: ^u8) => (string)

#str_print: @extern proc(buffer: ^ArrayRaw, str: string)

#str_print_repeat: @extern proc(buffer: ^ArrayRaw, str: string, count: uint)

#str_printf: @extern proc(buffer: ^ArrayRaw, fmt: ^u8)

#str_advance: @extern proc(str: ^string, len: uint) => (string)

#str_clone: @extern proc(str: string, allocator: ^Allocator) => (string)

#str_copy: @extern proc(dst: string, src: string)

#str_path_stem: @extern proc(path: string) => (string)

#str_path_extension: @extern proc(path: string) => (string)

#str_path_tail: @extern proc(path: string) => (string)

#str_path_dir: @extern proc(path: string) => (string)

#str_last_index_of_any_char: @extern proc(str: string, chars: string, out_index: ^uint) => (bool)

#str_contains: @extern proc(str: string, substr: string) => (bool)

#str_find_substring: @extern proc(str: string, substr: string, out_index: ^uint) => (bool)

#str_replace: @extern proc(allocator: ^Allocator, str: string, search_for: string, replace_with: string) => (string)

#str_replace_multi: @extern proc(allocator: ^Allocator, str: string, search_for: SliceRaw, replace_with: SliceRaw) => (string)

#str_to_lower: @extern proc(str: string, a: ^Allocator) => (string)

#str_rune_to_lower: @extern proc(r: rune) => (rune)

#str_ends_with: @extern proc(str: string, end: string) => (bool)

#str_starts_with: @extern proc(str: string, start: string) => (bool)

#str_cut_end: @extern proc(str: string, end: string) => (string)

#str_cut_start: @extern proc(str: string, start: string) => (string)

#str_split_i: @extern proc(str: string, character: u8, a: ^Allocator, out: ^SliceRaw)

#str_join: @extern proc(a: ^Allocator, args: SliceRaw) => (string)

#str_equals: @extern proc(a: string, b: string) => (bool)

#str_equals_nocase: @extern proc(a: string, b: string) => (bool)

#str_slice: @extern proc(str: string, lo: uint, hi: uint) => (string)

#str_slice_before: @extern proc(str: string, mid: uint) => (string)

#str_slice_after: @extern proc(str: string, mid: uint) => (string)

#str_tou64: @extern proc(s: string, radix: u32, out_value: ^u64) => (bool)

#str_tos64: @extern proc(s: string, radix: u32, out_value: ^s64) => (bool)

#str_tof64: @extern proc(s: string, out: ^f64) => (bool)

#str_fromuint: @extern proc(allocator: ^Allocator, bytes: string) => (string)

#str_from_int: @extern proc(allocator: ^Allocator, bytes: string) => (string)

#str_from_float: @extern proc(allocator: ^Allocator, bytes: string) => (string)

#str_from_float_ex: @extern proc(allocator: ^Allocator, bytes: string, num_decimals: s32) => (string)

#str_to_cstring: @extern proc(s: string, a: ^Allocator) => (^u8)

#str_from_cstring: @extern proc(s: ^u8) => (string)

#str_hash: @extern proc(s: string) => (u64)

#str_to_utf16: @extern proc(str: string, allocator: ^Allocator, num_null_terminations: uint, out_len: ^uint) => (^u16)

#str_from_utf16: @extern proc(str_utf16: ^u16, allocator: ^Allocator) => (string)

#str_encode_rune: @extern proc(output: ^u8, r: rune) => (uint)

#str_next_rune: @extern proc(str: string, byteoffset: ^uint) => (rune)

#str_prev_rune: @extern proc(str: string, byteoffset: ^uint) => (rune)

#str_rune_count: @extern proc(str: string) => (uint)

#os_clipboard_get_text: @extern proc(allocator: ^Allocator) => (string)

#os_clipboard_set_text: @extern proc(str: string)

#os_dynamic_library_load: @extern proc(filepath: string) => (OS_DynamicLibrary)

#os_dynamic_library_unload: @extern proc(dll: OS_DynamicLibrary) => (bool)

#os_dynamic_library_sym_address: @extern proc(dll: OS_DynamicLibrary, symbol: string) => (^u8)

#os_path_is_absolute: @extern proc(path: string) => (bool)

#os_path_to_absolute: @extern proc(working_dir: string, path: string, a: ^Allocator) => (string)

#os_visit_directory: @extern proc(path: string, visitor: OS_VisitDirectoryVisitor, visitor_userptr: ^u8) => (bool)

#os_directory_exists: @extern proc(path: string) => (bool)

#os_delete_directory: @extern proc(path: string) => (bool)

#os_make_directory: @extern proc(path: string) => (bool)

#os_file_read_whole: @extern proc(filepath: string, allocator: ^Allocator, out_str: ^string) => (bool)

#os_file_write_whole: @extern proc(filepath: string, data: string) => (bool)

#os_file_open: @extern proc(filepath: string, mode: OS_FileOpenMode) => (File)

#os_file_is_valid: @extern proc(file: File) => (bool)

#os_file_close: @extern proc(file: File) => (bool)

#os_file_size: @extern proc(file: File) => (uint)

#os_file_read: @extern proc(file: File, dst: ^u8, size: uint) => (uint)

#os_file_write: @extern proc(file: File, data: string) => (bool)

#os_file_get_position: @extern proc(file: File) => (uint)

#os_file_set_position: @extern proc(file: File, position: uint) => (bool)

#os_file_get_modtime: @extern proc(filepath: string) => (u64)

#os_file_clone: @extern proc(src_filepath: string, dst_filepath: string) => (bool)

#os_file_delete: @extern proc(filepath: string) => (bool)

#os_file_picker_dialog: @extern proc(allocator: ^Allocator) => (string)

#time_get_tick: @extern proc => (Tick)

#randu32: @extern proc => (u32)

#randu64: @extern proc => (u64)

#rand_float_in_range: @extern proc(minimum: f32, maximum: f32) => (f32)

