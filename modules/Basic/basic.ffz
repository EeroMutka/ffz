// what should we even put in basic?
// integer min/max constants
// 
// some utilities, like max/min functions unless we make them built-ins. hmm...
// 
// sleep
// atomics
// 
// memory allocation related stuff:
// memory reserve / commit / decommit / release
// Arena
// temp arena
// 
// 
// leak tracker?
// 
// okay. So the philosophy is: let's keep Basic as simple and small as possible.
// Just add what's absolutely a good idea.
// Array, Map, etc can live separately.
// 
// Array?
// Map? and hashing?
// 
// Threading?
// Generic heap allocator?

#ENABLE_DEBUG_CHECKS: true

// globals shouldn't be allowed in modules, but only for the basic module an exception is made
@*global
_temp_arena_tls_index: u32(0)

#ArenaMark: struct {head: ^u8}

#Arena: struct {
	@*using allocator: Allocator // NOTE: must be the first field for downcasting!
	
	system_page_size: u32 // practically always 4 KiB
	
	// virtual memory
	reserve_base: ^u8
	
	head: ^u8
	committed_end: ^u8
}

// https://physics.nist.gov/cuu/Units/binary.html
#KiB: proc(x: uint) => (uint) { ret bit_shl(x, 10) }
#MiB: proc(x: uint) => (uint) { ret bit_shl(x, 20) }
#GiB: proc(x: uint) => (uint) { ret bit_shl(x, 30) }
#TiB: proc(x: uint) => (uint) { ret bit_shl(x, 40) }

//#S8_MIN: -128
#S8_MAX: 127
#U8_MAX: 255
//#S16_MIN: -32768
#S16_MAX: 32767
#U16_MAX: 0xffff
//#S32_MIN: 0x80000000
#S32_MAX: 0x7fffffff
#U32_MAX: 0xffffffff
//#S64_MIN: 0x8000000000000000
#S64_MAX: 0x7fffffffffffffff
#U64_MAX: 0xffffffffffffffff

#AllocatorProc: proc(allocator: ^Allocator, old_ptr: ^raw, old_size: uint, size: uint, align: uint) => ^raw

#arena_allocator_proc: AllocatorProc {
	is_pow: is_power_of_2[uint](in.align)
	//assert(in.align > 0 && )
	
	arena: ^Arena(in.allocator)
	
	if in.size > in.old_size {
		new_allocation: arena_push(arena, in.size, in.align)
		
		if in.old_ptr != ^raw(0) {
			memcpy(new_allocation.ptr, in.old_ptr, in.old_size) // first do the copy, then fill old with garbage
			
			if ENABLE_DEBUG_CHECKS {
				_debug_clear_memory(in.old_ptr, in.old_size)
				_debug_clear_memory(^u8(uint(new_allocation.ptr) + in.old_size), in.size - in.old_size)
			}
		}
		
		ret new_allocation.ptr
	}
	else {
		if ENABLE_DEBUG_CHECKS { // erase the top
			_debug_clear_memory(^u8(uint(in.old_ptr) + in.size), in.old_size - in.size) 
		}
	}
	
	ret in.old_ptr
}

// `reserve_base` can be NULL for automatically determined address
#arena_make_virtual_reserve_fixed: proc(reserve_size: uint, reserve_base: ^u8) => ^Arena {
	sys_info: SYSTEM_INFO(~~)
	GetSystemInfo(&sys_info)
	
	base: virtual_reserve(reserve_size, reserve_base)
	if base == ^u8(0) { dbgbreak }
	
	dummy: Arena{
		allocator: Allocator{arena_allocator_proc}
		system_page_size: sys_info.dwPageSize
		reserve_base: base
		head: base
		committed_end: base
	}
	
	arena: ^Arena(arena_push(&dummy, size_of(Arena), align_of(Arena)).ptr)
	arena^ = dummy
	ret arena
}

// If you want to learn more about bit twiddling tricks, such as `align_down` and `align_up`,
// a good resource is the book Hacker's Delight by Warren, H. It goes through a lot of these.

// `align` must be a power of 2.
// `x` is allowed to be positive or negative.
#align_down: proc(x: int, align: int) => int {
	ret bit_and(x, -align)
}

// `align` must be a power of 2.
// `x` is allowed to be positive or negative.
#align_up: proc(x: int, align: int) => int {
	ret bit_and(x + align - 1, -align)
}

// i.e. 0b0010101000
// =>   0b0010100000
#flip_rightmost_one_bit: poly[T] proc(x: T) => T {
	ret bit_and(x, x - 1)
}

// i.e. 0b0010101111
// =>   0b0010111111
#flip_rightmost_zero_bit: poly[T] proc(x: T) => T {
	ret bit_or(x, x + 1)
}

#round_up_to_power_of_2: proc(v: uint) => uint {
	// todo: use the following formula from Tilde Backend
	// x == 1 ? 1 : 1 << (64 - _lzcnt_u64(x - 1))

	// https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2
	v = . - 1
	v = bit_or(., bit_shr(., 1))
	v = bit_or(., bit_shr(., 2))
	v = bit_or(., bit_shr(., 4))
	v = bit_or(., bit_shr(., 8))
	v = bit_or(., bit_shr(., 16))
	v = bit_or(., bit_shr(., 32))
	v = . + 1
	ret v
}

// x == 0 will return 1
#is_power_of_2: poly[T] proc(x: T) => bool {
	// When x is a power of 2, it must only contain a single 1-bit
	ret flip_rightmost_one_bit[T](x) == 0
}

#get_alignment_for_size: proc(size: uint) => uint {
	#small_aligns: [?]uint{0, 1, 2, 4, 4, 8, 8, 8, 8}
	if size <= 8 { ret small_aligns[size] }
	ret 16
}

// This procedure clears memory to 0xCC to make un/deinitialized-memory-use bugs more
// obvious, and to trigger possible data breakpoints.
#_debug_clear_memory: proc(ptr: ^raw, size: uint) {
	memset(ptr, 0xCC, size)
}

// should we have a polymorphic `arena_push_new` thing?
// #arena_push_new: poly[T] proc(arena: ^Arena) => ^T {...}

#arena_push: proc(arena: ^Arena, size: uint, align: uint) => []u8 {
	allocation_pos: ^u8(align_up(int(arena.head), align))
	
	arena.head = ^u8(uint(allocation_pos) + size)
	
	if (uint(arena.head) > uint(arena.committed_end)) {
		ok: virtual_commit(arena.committed_end, uint(arena.head) - uint(arena.committed_end))
		if !ok { dbgbreak }
		
		arena.committed_end= ^u8(align_up(uint(arena.committed_end), int(arena.system_page_size)))
	}
	
	//if ENABLE_DEBUG_CHECKS {
	//	_debug_clear_memory(allocation_pos, size)
	//}
	
	ret []u8{allocation_pos, size}
}

// returns NULL if invalid
#virtual_reserve: proc(size: uint, optional_address: ^u8) => ^u8 {
	ret VirtualAlloc(optional_address, size, MEM_RESERVE, PAGE_READWRITE)
}

#virtual_commit: proc(ptr: ^u8, size: uint) => bool {
	ret VirtualAlloc(ptr, size, MEM_COMMIT, PAGE_READWRITE) != ^u8(0)
}

#virtual_decommit: proc(ptr: ^u8, size: uint) => bool {
	ret VirtualFree(ptr, size, MEM_DECOMMIT) == 1
}

#virtual_free: proc(ptr: ^u8) => bool {
	ret VirtualFree(ptr, 0, MEM_RELEASE) == 1
}

#select: poly[T] proc(select_a: bool, a: T, b: T) => T {
	if select_a { ret a }
	ret b
}

#max: poly[T] proc(a: T, b: T) => T {
	if a > b { ret a }
	ret b
}

#min: poly[T] proc(a: T, b: T) => T {
	if a < b { ret a }
	ret b
}

#copy: poly[T] proc(dst: []T, src: []T) {
	//assert(dst.len == src.len)
	// I think copy should do a memmove...
	dbgbreak //memcpy(dst.ptr, src.ptr, src.len * size_of(T))
}

#fill: poly[T] proc(dst: []T, value: T) {
	dbgbreak
}

#as_bytes: poly[T] proc(value: ^T) => []u8 {
	ret []u8{^u8(value), size_of(T)}
}

#Allocator: struct {
	_proc: AllocatorProc
}

#make_slice_undef: poly[T] proc(len: uint, alc: ^Allocator) => []T {
	ret []T{
		^T(alc._proc(alc, ^raw(0), 0, len * size_of(T), align_of(T)))
		len
	}
}

#resize_slice_undef: poly[T] proc(slice: ^[]T, len: uint, alc: ^Allocator) {
}

#free_slice: poly[T] proc(slice: []T, alc: ^Allocator) {
	alc._proc(alc, (^raw)(slice.ptr), slice.len, 0, 0)
}

#assert: proc(x: bool) {
	if !x { dbgbreak }
}

// TODO: unicode support (and printing > 4GB strings?)
#print: proc(str: string) {
	num_chars_written: u32(~~)
	assert(WriteConsoleA(GetStdHandle(STD_OUTPUT_HANDLE), str.ptr, u32(str.len), &num_chars_written, ^raw(0)) != 0)
}

#temp_alc: proc() => ^Allocator {
	ret ^Allocator(TlsGetValue(_temp_arena_tls_index))
}

// WARNING: call `temp_get_mark` and `temp_set_mark` only when you know exactly what you're doing.
// The scope must be completely self-contained; it must not leak anything to the outside world.
// This is an easy footgun! (include an example)
#temp_get_mark: proc() => ArenaMark {
	ret ArenaMark{^u8(0)}
}

#temp_set_mark: proc(mark: ArenaMark) {}

#thread_init_basic: proc() {
	// initialize CRT manually since we're using our own entry point instead of the CRT "main"
	//_CRT_INIT(GetModuleHandleW(^raw(0)), DLL_PROCESS_ATTACH, ^raw(0))
	
	//_stdout = GetStdHandle(STD_OUTPUT_HANDLE)
	
	// Deterministic base-address. hmm... this won't work with multiple threads.
	temp_arena_base: ^u8(TiB(2))
	temp_arena: arena_make_virtual_reserve_fixed(MiB(2), temp_arena_base)
	_temp_arena_tls_index = TlsAlloc()
	assert(TlsSetValue(_temp_arena_tls_index, temp_arena) != 0)
}

#thread_deinit_basic: proc() {
	//_CRT_INIT(GetModuleHandleW(^raw(0)), DLL_PROCESS_DETACH, ^raw(0))
}

@*extern{"?"}
#entry: proc(args: []string) => u32

// The Basic-module overrides the main entry point for your program
// so that you don't have to explicitly call `thread_init_basic()` every time
// you write a new program, and to make dealing with command-line arguments a bit nicer.
// `ffz_entry` is the true entry point, `entry` is just what this module expects.
//
// The reason we're calling it "entry" and not "main" is just to make
// development less error-prone as "main" has a special meaning in the C world,
// which is also one of the compilation targets that FFZ supports.
// The "m" word is strictly prohibited over here!

// @*module_defined_entry exports the procedure symbol, even though it's inside a to-be-imported module, but
// only when we're building an executable. It ignores it when building a static/dynamic library.
// If we had #if support, we could get rid of this.

// how would we do DLL/static libs?
// thread_init_basic/thread_deinit_basic must be called if the code is using the Basic module. That's it!

@*module_defined_entry
#main: proc(argc: u32, argv: ^^u8) => u32 { // ffz_entry
	thread_init_basic()
	
	args: []string{}
	exit_code: entry(args)
	
	// thread_deinit_basic()
	
	ExitProcess(exit_code) // https://nullprogram.com/blog/2023/02/15/
	ret 0
}

// -- OS-specific defines -----------------------------------------------------

#SYSTEM_INFO: struct {
	dwOemId: u32
	dwPageSize: u32
	lpMinimumApplicationAddress: ^raw
	lpMaximumApplicationAddress: ^raw
	dwActiveProcessorMask: ^u32
	dwNumberOfProcessors: u32
	dwProcessorType: u32
	dwAllocationGranularity: u32
	wProcessorLevel: u16
	wProcessorRevision: u16
}

#Kernel32: *extern{":Kernel32.lib"}

#HANDLE: ^raw

#asm_routines: *extern{"asm_routines/asm_routines.obj"}

@asm_routines #memcpy: proc(dst: ^raw, src: ^raw, size: uint)
@asm_routines #memmove: proc(dst: ^raw, src: ^raw, size: uint)
@asm_routines #memset: proc(dst: ^raw, c: u32, n: uint)

@Kernel32 #VirtualAlloc: proc(lpAddress: ^u8, dwSize: uint, flAllocationType: u32, flProtect: u32) => ^u8
@Kernel32 #VirtualFree: proc(lpAddress: ^u8, dwSize: uint, dwFreeType: u32) => u32
@Kernel32 #GetSystemInfo: proc(lpSystemInfo: ^SYSTEM_INFO)
@Kernel32 #WriteConsoleA: proc(hConsoleOutput: HANDLE, lpBuffer: ^raw, nNumberOfCharsToWrite: u32, lpNumberOfCharsWritten: ^u32, lpReserved: ^raw) => s32
@Kernel32 #GetStdHandle: proc(nStdHandle: u32) => HANDLE
@Kernel32 #ExitProcess: proc(uExitCode: u32)

@Kernel32 #TlsAlloc: proc => u32
@Kernel32 #TlsFree: proc(dwTlsIndex: u32) => s32
@Kernel32 #TlsGetValue: proc(dwTlsIndex: u32) => ^raw
@Kernel32 #TlsSetValue: proc(dwTlsIndex: u32, lpTlsValue: ^raw) => s32

#DLL_PROCESS_ATTACH: u32(1)
#DLL_PROCESS_DETACH: u32(0)
//@Kernel32 #_CRT_INIT: proc(hinstDLL: ^raw, fdwReason: u32, lpReserved: ^raw)
@Kernel32 #GetModuleHandleW: proc(lpModuleName: ^raw) => ^raw

#STD_OUTPUT_HANDLE: u32(0xfffffff5)

#MEM_RESERVE: u32(8192)
#MEM_COMMIT: u32(4096)
#PAGE_READWRITE: u32(4)
#MEM_DECOMMIT: u32(16384)
#MEM_RELEASE: u32(32768)
