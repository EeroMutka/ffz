
#STBTT: *extern{"lib/stb_truetype.lib"}

#buf: struct {
	data: ^u8
	cursor: s32
	size: s32
}

#bakedchar: struct {
	x0: u16
	y0: u16
	x1: u16
	y1: u16
	xoff: f32
	yoff: f32
	xadvance: f32
}

#aligned_quad: struct {
	x0: f32
	y0: f32
	s0: f32
	t0: f32
	x1: f32
	y1: f32
	s1: f32
	t1: f32
}

#packedchar: struct {
	x0: u16
	y0: u16
	x1: u16
	y1: u16
	xoff: f32
	yoff: f32
	xadvance: f32
	xoff2: f32
	yoff2: f32
}

#pack_context: struct {
	user_allocator_context: ^raw
	pack_info: ^raw
	width: s32
	height: s32
	stride_in_bytes: s32
	padding: s32
	skip_missing: s32
	h_oversample: u32
	v_oversample: u32
	pixels: ^u8
	nodes: ^raw
}

#fontinfo: struct {
	userdata: ^raw
	data: ^u8
	fontstart: s32
	numGlyphs: s32
	loca: s32
	head: s32
	glyf: s32
	hhea: s32
	hmtx: s32
	kern: s32
	gpos: s32
	svg: s32
	index_map: s32
	indexToLocFormat: s32
	cff: buf
	charstrings: buf
	gsubrs: buf
	subrs: buf
	fontdicts: buf
	fdselect: buf
}

#rect: struct {
	x: coord
	y: coord
	id: s32
	w: s32
	h: s32
	was_packed: s32
}

#pack_range: struct {
	font_size: f32
	first_unicode_codepoint_in_range: s32
	array_of_unicode_codepoints: ^s32
	num_chars: s32
	chardata_for_range: ^packedchar
	h_oversample: u8
	v_oversample: u8
}

#kerningentry: struct {
	glyph1: s32
	glyph2: s32
	advance: s32
}

#vertex: struct {
	x: s16
	y: s16
	cx: s16
	cy: s16
	cx1: s16
	cy1: s16
	type: u8
	padding: u8
}

#_bitmap: struct {
	w: s32
	h: s32
	stride: s32
	pixels: ^u8
}

@STBTT #stbtt_BakeFontBitmap: proc(data: ^u8, offset: s32, pixel_height: f32, pixels: ^u8, pw: s32, ph: s32, first_char: s32, num_chars: s32, chardata: ^bakedchar) => s32

@STBTT #stbtt_GetBakedQuad: proc(chardata: ^bakedchar, pw: s32, ph: s32, char_index: s32, xpos: ^f32, ypos: ^f32, q: ^aligned_quad, opengl_fillrule: s32)

@STBTT #stbtt_GetScaledFontVMetrics: proc(fontdata: ^u8, index: s32, size: f32, ascent: ^f32, descent: ^f32, lineGap: ^f32)

@STBTT #stbtt_PackBegin: proc(spc: ^pack_context, pixels: ^u8, width: s32, height: s32, stride_in_bytes: s32, padding: s32, alloc_context: ^raw) => s32

@STBTT #stbtt_PackEnd: proc(spc: ^pack_context)

@STBTT #stbtt_PackFontRange: proc(spc: ^pack_context, fontdata: ^u8, font_index: s32, font_size: f32, first_unicode_char_in_range: s32, num_chars_in_range: s32, chardata_for_range: ^packedchar) => s32

@STBTT #stbtt_PackFontRanges: proc(spc: ^pack_context, fontdata: ^u8, font_index: s32, ranges: ^pack_range, num_ranges: s32) => s32

@STBTT #stbtt_PackSetOversampling: proc(spc: ^pack_context, h_oversample: u32, v_oversample: u32)

@STBTT #stbtt_PackSetSkipMissingCodepoints: proc(spc: ^pack_context, skip: s32)

@STBTT #stbtt_GetPackedQuad: proc(chardata: ^packedchar, pw: s32, ph: s32, char_index: s32, xpos: ^f32, ypos: ^f32, q: ^aligned_quad, align_to_integer: s32)

@STBTT #stbtt_PackFontRangesGatherRects: proc(spc: ^pack_context, info: ^fontinfo, ranges: ^pack_range, num_ranges: s32, rects: ^rect) => s32

@STBTT #stbtt_PackFontRangesPackRects: proc(spc: ^pack_context, rects: ^rect, num_rects: s32)

@STBTT #stbtt_PackFontRangesRenderIntoRects: proc(spc: ^pack_context, info: ^fontinfo, ranges: ^pack_range, num_ranges: s32, rects: ^rect) => s32

@STBTT #stbtt_GetNumberOfFonts: proc(data: ^u8) => s32

@STBTT #stbtt_GetFontOffsetForIndex: proc(data: ^u8, index: s32) => s32

@STBTT #stbtt_InitFont: proc(info: ^fontinfo, data: ^u8, offset: s32) => s32

@STBTT #stbtt_FindGlyphIndex: proc(info: ^fontinfo, unicode_codepoint: s32) => s32

@STBTT #stbtt_ScaleForPixelHeight: proc(info: ^fontinfo, pixels: f32) => f32

@STBTT #stbtt_ScaleForMappingEmToPixels: proc(info: ^fontinfo, pixels: f32) => f32

@STBTT #stbtt_GetFontVMetrics: proc(info: ^fontinfo, ascent: ^s32, descent: ^s32, lineGap: ^s32)

@STBTT #stbtt_GetFontVMetricsOS2: proc(info: ^fontinfo, typoAscent: ^s32, typoDescent: ^s32, typoLineGap: ^s32) => s32

@STBTT #stbtt_GetFontBoundingBox: proc(info: ^fontinfo, x0: ^s32, y0: ^s32, x1: ^s32, y1: ^s32)

@STBTT #stbtt_GetCodepointHMetrics: proc(info: ^fontinfo, codepoint: s32, advanceWidth: ^s32, leftSideBearing: ^s32)

@STBTT #stbtt_GetCodepointKernAdvance: proc(info: ^fontinfo, ch1: s32, ch2: s32) => s32

@STBTT #stbtt_GetCodepointBox: proc(info: ^fontinfo, codepoint: s32, x0: ^s32, y0: ^s32, x1: ^s32, y1: ^s32) => s32

@STBTT #stbtt_GetGlyphHMetrics: proc(info: ^fontinfo, glyph_index: s32, advanceWidth: ^s32, leftSideBearing: ^s32)

@STBTT #stbtt_GetGlyphKernAdvance: proc(info: ^fontinfo, glyph1: s32, glyph2: s32) => s32

@STBTT #stbtt_GetGlyphBox: proc(info: ^fontinfo, glyph_index: s32, x0: ^s32, y0: ^s32, x1: ^s32, y1: ^s32) => s32

@STBTT #stbtt_GetKerningTableLength: proc(info: ^fontinfo) => s32

@STBTT #stbtt_GetKerningTable: proc(info: ^fontinfo, table: ^kerningentry, table_length: s32) => s32

@STBTT #stbtt_IsGlyphEmpty: proc(info: ^fontinfo, glyph_index: s32) => s32

@STBTT #stbtt_GetCodepointShape: proc(info: ^fontinfo, unicode_codepoint: s32, vertices: ^^vertex) => s32

@STBTT #stbtt_GetGlyphShape: proc(info: ^fontinfo, glyph_index: s32, vertices: ^^vertex) => s32

@STBTT #stbtt_FreeShape: proc(info: ^fontinfo, vertices: ^vertex)

@STBTT #stbtt_FindSVGDoc: proc(info: ^fontinfo, gl: s32) => ^u8

@STBTT #stbtt_GetCodepointSVG: proc(info: ^fontinfo, unicode_codepoint: s32, svg: ^^u8) => s32

@STBTT #stbtt_GetGlyphSVG: proc(info: ^fontinfo, gl: s32, svg: ^^u8) => s32

@STBTT #stbtt_FreeBitmap: proc(bitmap: ^u8, userdata: ^raw)

@STBTT #stbtt_GetCodepointBitmap: proc(info: ^fontinfo, scale_x: f32, scale_y: f32, codepoint: s32, width: ^s32, height: ^s32, xoff: ^s32, yoff: ^s32) => ^u8

@STBTT #stbtt_GetCodepointBitmapSubpixel: proc(info: ^fontinfo, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, codepoint: s32, width: ^s32, height: ^s32, xoff: ^s32, yoff: ^s32) => ^u8

@STBTT #stbtt_MakeCodepointBitmap: proc(info: ^fontinfo, output: ^u8, out_w: s32, out_h: s32, out_stride: s32, scale_x: f32, scale_y: f32, codepoint: s32)

@STBTT #stbtt_MakeCodepointBitmapSubpixel: proc(info: ^fontinfo, output: ^u8, out_w: s32, out_h: s32, out_stride: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, codepoint: s32)

@STBTT #stbtt_MakeCodepointBitmapSubpixelPrefilter: proc(info: ^fontinfo, output: ^u8, out_w: s32, out_h: s32, out_stride: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, oversample_x: s32, oversample_y: s32, sub_x: ^f32, sub_y: ^f32, codepoint: s32)

@STBTT #stbtt_GetCodepointBitmapBox: proc(font: ^fontinfo, codepoint: s32, scale_x: f32, scale_y: f32, ix0: ^s32, iy0: ^s32, ix1: ^s32, iy1: ^s32)

@STBTT #stbtt_GetCodepointBitmapBoxSubpixel: proc(font: ^fontinfo, codepoint: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, ix0: ^s32, iy0: ^s32, ix1: ^s32, iy1: ^s32)

@STBTT #stbtt_GetGlyphBitmap: proc(info: ^fontinfo, scale_x: f32, scale_y: f32, glyph: s32, width: ^s32, height: ^s32, xoff: ^s32, yoff: ^s32) => ^u8

@STBTT #stbtt_GetGlyphBitmapSubpixel: proc(info: ^fontinfo, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, glyph: s32, width: ^s32, height: ^s32, xoff: ^s32, yoff: ^s32) => ^u8

@STBTT #stbtt_MakeGlyphBitmap: proc(info: ^fontinfo, output: ^u8, out_w: s32, out_h: s32, out_stride: s32, scale_x: f32, scale_y: f32, glyph: s32)

@STBTT #stbtt_MakeGlyphBitmapSubpixel: proc(info: ^fontinfo, output: ^u8, out_w: s32, out_h: s32, out_stride: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, glyph: s32)

@STBTT #stbtt_MakeGlyphBitmapSubpixelPrefilter: proc(info: ^fontinfo, output: ^u8, out_w: s32, out_h: s32, out_stride: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, oversample_x: s32, oversample_y: s32, sub_x: ^f32, sub_y: ^f32, glyph: s32)

@STBTT #stbtt_GetGlyphBitmapBox: proc(font: ^fontinfo, glyph: s32, scale_x: f32, scale_y: f32, ix0: ^s32, iy0: ^s32, ix1: ^s32, iy1: ^s32)

@STBTT #stbtt_GetGlyphBitmapBoxSubpixel: proc(font: ^fontinfo, glyph: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, ix0: ^s32, iy0: ^s32, ix1: ^s32, iy1: ^s32)

@STBTT #stbtt_Rasterize: proc(result: ^_bitmap, flatness_in_pixels: f32, vertices: ^vertex, num_verts: s32, scale_x: f32, scale_y: f32, shift_x: f32, shift_y: f32, x_off: s32, y_off: s32, invert: s32, userdata: ^raw)

@STBTT #stbtt_FreeSDF: proc(bitmap: ^u8, userdata: ^raw)

@STBTT #stbtt_GetGlyphSDF: proc(info: ^fontinfo, scale: f32, glyph: s32, padding: s32, onedge_value: u8, pixel_dist_scale: f32, width: ^s32, height: ^s32, xoff: ^s32, yoff: ^s32) => ^u8

@STBTT #stbtt_GetCodepointSDF: proc(info: ^fontinfo, scale: f32, codepoint: s32, padding: s32, onedge_value: u8, pixel_dist_scale: f32, width: ^s32, height: ^s32, xoff: ^s32, yoff: ^s32) => ^u8

@STBTT #stbtt_FindMatchingFont: proc(fontdata: ^u8, name: ^u8, flags: s32) => s32

@STBTT #stbtt_CompareUTF8toUTF16_bigendian: proc(s1: ^u8, len1: s32, s2: ^u8, len2: s32) => s32

@STBTT #stbtt_GetFontNameString: proc(font: ^fontinfo, length: ^s32, platformID: s32, encodingID: s32, languageID: s32, nameID: s32) => ^u8

