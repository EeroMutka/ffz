#Basic: import(":Basic")

#OpenMode: enum, u32 {
	Read: 0
	Write: 1
	Append: 2
}

#File: struct {
	os_handle: ^raw
}

#read_entire_file: proc(filepath: string, alc: ^Basic.Allocator) => struct{ok: bool, data: []u8} {
	f: open(filepath, OpenMode.Read)
	if !f.ok {
		ret {false, {}}
	}
	
	size: uint(get_size(f.file))
	data: Basic.make_slice_undef[u8](size, alc)
	ok: read(f.file, data) == size
	
	close(f.file)
	
	ret {ok, data}
}

// #write_entire_file: proc(filepath: string, data: []u8) => bool

#get_size_by_filepath: proc(filepath: string) => struct{ok: bool, size: u64} {
	f: open(filepath, OpenMode.Read)
	if !f.ok {
		ret {false, 0}
	}
	
	size: get_size(f.file)
	close(f.file)
	ret {true, size}
}


// OS-specific API:

// #open: proc(filepath: string, mode: OpenMode) => struct{ok: bool, file: File}
// #close: proc(file: File)

// #get_size: proc(file: File) => u64

// #read: proc(file: File, dest: []u8) => uint

// #write_unbuffered: proc(file: File, data: []u8)
// #write_buffered: proc(file: File, data: []u8)

// #get_cursor: proc(file: File) => uint
// #set_cursor: proc(file: File, cursor: uint)
