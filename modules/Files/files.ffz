#Basic: import(":Basic")

#OpenMode: enum, u32 {
	Read: 0
	Write: 1
	Append: 2
}

#File: struct {
	os_handle: ^raw
}

#read_entire_file: proc(filepath: string, arena: ^Basic.Arena) => struct{ok: bool, data: []u8} {
	f: open(filepath, OpenMode.Read)
	if !f.ok {
		return {false, {}}
	}
	
	size: uint(get_size(f.file))
	data: Basic.make_slice_undef[u8](size, arena)
	ok: read(f.file, data) == size
	
	close(f.file)
	
	return {ok, data}
}

// #write_entire_file: proc(filepath: string, data: []u8) => bool

#get_size_by_filepath: proc(filepath: string) => struct{ok: bool, size: u64} {
	f: open(filepath, OpenMode.Read)
	if !f.ok {
		return {false, 0}
	}
	
	size: get_size(f.file)
	close(f.file)
	return {true, size}
}
