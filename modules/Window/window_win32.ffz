#Basic: import(":Basic")

#assert: Basic.assert

#WindowHandle: import("WindowHandle")
#Window: WindowHandle.Window

#str_to_utf16: proc(str: string, arena: ^Basic.Arena) => []u16 {
	if str.len == 0 {
		return []u16{}
	}
	
	#MB_ERR_INVALID_CHARS: u32(0x00000008)
	#CP_UTF8: u32(65001)
	
	len: MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.ptr, s32(str.len), ^u16(0), 0)
	assert(len != 0)
	
	out: Basic.make_slice_undef[u16](uint(len) + 1, arena)
	
	len2: MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, str.ptr, s32(str.len), out.ptr, len)
	
	// null terminator
	out[len] = 0
	return out
}

#WNDPROC: proc(hWnd: HWND, uMsg: u32, wParam: u64, lParam: s64) => s64

#window_proc: WNDPROC {
	out: ^WindowEvents(GetWindowLongPtrW(in.hWnd, GWLP_USERDATA))
	
	if in.uMsg == WM_SIZE {
		// "The low-order word of lParam specifies the new width of the client area."
		// "The high-order word of lParam specifies the new height of the client area."
		
		width: u16(in.lParam)
		height: u16(bit_shr(in.lParam, 16))
		
		if out != ^WindowEvents(0) {
			out._resize_cb(uint(width), uint(height), out.resize_cb_user_ptr)
		}
	}
	else if in.uMsg == WM_CLOSE || in.uMsg == WM_QUIT {
		out.quit = true
	}
	else if in.uMsg == WM_SYSKEYDOWN || in.uMsg == WM_KEYDOWN {
		//repeat := ((cast (s32) lParam) & 0x40000000) != 0;
		//maybe_send_vkey_event(wParam, true, repeat);
		Basic.print("key down\n")
	}
	else if in.uMsg == WM_SYSKEYUP || in.uMsg == WM_KEYUP {
		//maybe_send_vkey_event(wParam, false);
		Basic.print("key up\n")
	}
	else if in.uMsg == WM_LBUTTONDOWN || in.uMsg == WM_LBUTTONDOWN {
		Basic.print("left mouse button event\n")
	}
	else if in.uMsg == WM_RBUTTONDOWN || in.uMsg == WM_RBUTTONUP {
		Basic.print("right mouse button event\n")
	}
	else if in.uMsg == WM_MBUTTONDOWN || in.uMsg == WM_MBUTTONUP {
		Basic.print("middle mouse button event\n")
	}
	
	return DefWindowProcW(in.hWnd, in.uMsg, in.wParam, in.lParam)
}

#WINDOW_CLASS_NAME: "ffz_window_module_class_name"

#register_window_class: proc() {
	// Windows requires us to first register a "window class" with a given name,
	// which will be used in subsequent calls to CreateWindowExW()
	
	hInst: GetModuleHandleW(^u16(0))
	
	//#COLOR_BACKGROUND: 1
	//bg_brush: HBRUSH(COLOR_BACKGROUND)
	
	// leave the background brush to NULL
	// https://stackoverflow.com/questions/6593014/how-to-draw-opengl-content-while-resizing-win32-window
	//wnd_class.hbrBackground
	
	temp: Basic.temp_push()
	
	wnd_class: WNDCLASSEXW{
		cbSize:          size_of(WNDCLASSEXW)
		style:           bit_or(CS_HREDRAW, bit_or(CS_VREDRAW, CS_OWNDC)) // CS_OWNDC is required for OpenGL
		lpfnWndProc:     window_proc
		cbClsExtra:      0
		cbWndExtra:      0
		hInstance:       hInst
		hIcon:           ^raw(0)
		hCursor:         LoadCursorW(HINSTANCE(0), ^u16(IDC_ARROW))
		hbrBackground:   ^raw(0)
		lpszMenuName:    ^u16(0)
		lpszClassName:   str_to_utf16(WINDOW_CLASS_NAME, temp.arena).ptr
		hIconSm:         ^raw(0)
	}
	
	atom: RegisterClassExW(&wnd_class)
	assert(atom != 0)
	
	Basic.temp_pop(temp)
}

#show: proc(window: Window) {
	assert(UpdateWindow(window.hwnd) != 0)
	_= ShowWindow(window.hwnd, SW_SHOW)
}


// NOTE:
// After calling create(), the window will remain hidden.
// To show the window, you must explicitly call show().
// This separation is there so that you can get rid of the initial flicker that normally happens when you
// create a window, then do some work such as initialize a graphics API, and finally present a frame.
// If you instead first call create(), then initialize the graphics API, and only then call show(), there won't
// be any flicker as the window doesn't have to wait for the initialization.
// 
#create: proc(width: uint, height: uint, name: string) => Window {
	// TODO: multiple windows?
	register_window_class()
	
	x: s32(200)
	y: s32(200)
	rect: RECT{x, y, x + s32(width), y + s32(height)}
	
	// AdjustWindowRect modifies the window rectangle: we give it the client area rectangle, it gives us back the entire window rectangle.
	_ = AdjustWindowRectEx(&rect, WS_OVERLAPPEDWINDOW, 0, 0)
	
	temp: Basic.temp_push()
	
	hwnd: CreateWindowExW(0
		str_to_utf16(WINDOW_CLASS_NAME, temp.arena).ptr
		str_to_utf16(name, temp.arena).ptr
		WS_OVERLAPPEDWINDOW
		rect.left
		rect.top
		rect.right - rect.left
		rect.bottom - rect.top
		HWND(0)
		HMENU(0)
		HINSTANCE(0)
		^raw(0))
	
	// failed
	Basic.assert(hwnd != HWND(0))
	
	Basic.temp_pop(temp)
	
	return Window{hwnd}
}

#ResizeCallback: proc(width: uint, height: uint, user_ptr: ^raw)

#WindowEvents: struct {
	_resize_cb: ResizeCallback
	resize_cb_user_ptr: ^raw
	quit: bool
}

#poll_events: proc(window: Window, resize_cb: ResizeCallback, resize_cb_user_ptr: ^raw) => WindowEvents {
	out: WindowEvents{resize_cb, resize_cb_user_ptr, false}
	
	// hmm... if its an infinite loop then we might never draw a frame!
	// what if we just process a single event?
	for loop: true, loop, {
		msg: MSG(~~)
		result: PeekMessageW(&msg, window.hwnd, 0, 0, PM_REMOVE)
		if result != 0 {
			_= TranslateMessage(&msg)
			
			// https://stackoverflow.com/questions/117792/best-method-for-storing-this-pointer-for-use-in-wndproc
			_= SetWindowLongPtrW(window.hwnd, GWLP_USERDATA, s64(&out))
			_= DispatchMessageW(&msg)
		}
		else {
			loop = false // TODO: continue / break
		}
	}
	
	return out
}

#HINSTANCE: ^raw
#HICON: ^raw
#HCURSOR: ^raw
#HBRUSH: ^raw
#HWND: ^raw
#HMODULE: ^raw
#HMENU: ^raw

#IDC_ARROW: 32512

#ATOM: u16

#PM_REMOVE: u32(0x0001)
#WS_OVERLAPPEDWINDOW: u32(0x00cf0000)
#SW_SHOW: s32(5)

#CS_VREDRAW:          u32(0x0001)
#CS_HREDRAW:          u32(0x0002)
//#CS_DBLCLKS:          u32(0x0008)
#CS_OWNDC:            u32(0x0020)
//#CS_CLASSDC:          u32(0x0040)
//#CS_PARENTDC:         u32(0x0080)
//#CS_NOCLOSE:          u32(0x0200)
//#CS_SAVEBITS:         u32(0x0800)
//#CS_BYTEALIGNCLIENT:  u32(0x1000)
//#CS_BYTEALIGNWINDOW:  u32(0x2000)
//#CS_GLOBALCLASS:      u32(0x4000)

#SIZE_RESTORED: u64(0)
#SIZE_MINIMIZED: u64(1)
#SIZE_MAXIMIZED: u64(2)

#GWLP_USERDATA: s32(0xffffffeb)

#WM_CLOSE: u32(0x0010)
#WM_QUIT: u32(0x0012)
#WM_SYSCOMMAND: u32(0x0112)
#WM_ACTIVATEAPP: u32(0x001C)
#WM_SYSKEYDOWN: u32(0x0104)
#WM_KEYDOWN: u32(0x0100)
#WM_SYSKEYUP: u32(0x0105)
#WM_KEYUP: u32(0x0101)
#WM_SYSCHAR: u32(0x0106)
#WM_CHAR: u32(0x0102)
#WM_SETFOCUS: u32(0x0007)
#WM_KILLFOCUS: u32(0x0008)
#WM_PAINT: u32(0x000F)
#WM_LBUTTONDOWN: u32(0x0201)
#WM_LBUTTONUP: u32(0x0202)
#WM_RBUTTONDOWN: u32(0x0204)
#WM_RBUTTONUP: u32(0x0205)
#WM_MBUTTONDOWN: u32(0x0207)
#WM_MBUTTONUP: u32(0x0208)
#WM_MOUSEMOVE: u32(0x0200)
#WM_MOUSEWHEEL: u32(0x020A)
#WM_INPUT: u32(0x00FF)
#WM_SIZE: u32(0x0005)
#WM_MOVE: u32(0x0003)
#WM_EXITSIZEMOVE: u32(0x0232)
#WM_DPICHANGED: u32(0x02E0)
#WM_DROPFILES: u32(0x0233)
#WM_SETCURSOR: u32(0x0020)

#WNDCLASSEXW: struct {
	cbSize: u32
	style: u32
	lpfnWndProc: WNDPROC
	cbClsExtra: s32
	cbWndExtra: s32
	hInstance: HINSTANCE
	hIcon: HICON
	hCursor: HCURSOR
	hbrBackground: HBRUSH
	lpszMenuName: ^u16
	lpszClassName: ^u16
	hIconSm: HICON
}

#POINT: struct {
	x: s32
	y: s32
}

#MSG: struct {
	hwnd: HWND
	message: u32
	wParam: u64
	lParam: s64
	time: u32
	pt: POINT
}

#RECT: struct {
	left: s32
	top: s32
	right: s32
	bottom: s32
}

@User32 #AdjustWindowRectEx: proc(lpRect: ^RECT, dwStyle: u32, bMenu: s32, dwExStyle: u32) => s32

@User32 #CreateWindowExW: proc(
	dwExStyle: u32
	lpClassName: ^u16
	lpWindowName: ^u16
	dwStyle: u32
	X: s32
	Y: s32
	nWidth: s32
	nHeight: s32
	hWndParent: HWND
	hMenu: HMENU
	hInstance: HINSTANCE
	lpParam: ^raw) => HWND

@Kernel32 #MultiByteToWideChar: proc(CodePage: u32, dwFlags: u32, lpMultiByteStr: ^u8, cbMultiByte: s32, lpWideCharStr: ^u16, cchWideChar: s32) => s32
@Kernel32 #GetModuleHandleW: proc(lpModuleName: ^u16) => HMODULE
@Kernel32 #OutputDebugStringA: proc(lpOutputString: ^u8)
//@Kernel32 #GetLastError: proc => u32

@User32 #UpdateWindow: proc(hWnd: HWND) => s32
@User32 #ShowWindow: proc(hWnd: HWND, nCmdShow: s32) => s32
@User32 #RegisterClassExW: proc(lpWndClass: ^WNDCLASSEXW) => ATOM
@User32 #LoadCursorW: proc(hInstance: HINSTANCE, lpCursorName: ^u16) => HCURSOR
@User32 #DefWindowProcW: proc(hWnd: HWND, Msg: u32, wParam: u64, lParam: s64) => s64
@User32 #PeekMessageW: proc(lpMsg: ^MSG, hWnd: HWND, wMsgFilterMin: u32, wMsgFilterMax: u32, wRemoveMsg: u32) => s32
@User32 #TranslateMessage: proc(lpMsg: ^MSG) => s32
@User32 #DispatchMessageW: proc(lpMsg: ^MSG) => s64
@User32 #GetWindowLongPtrW: proc(hWnd: HWND, nIndex: s32) => s64
@User32 #SetWindowLongPtrW: proc(hWnd: HWND, nIndex: s32, dwNewLong: s64) => s64
//@User32 #GetClientRect: proc(hWnd: HWND, lpRect: ^RECT) => s32

@Gdi32 #CreateSolidBrush: proc(color: u32) => HBRUSH

#Kernel32: extern{":Kernel32.lib"}
#User32: extern{":User32.lib"}
#Gdi32: extern{":Gdi32.lib"}
