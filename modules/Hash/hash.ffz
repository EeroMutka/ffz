
// Interesting resources related to hashing:
// https://papa.bretmulvey.com/post/124027987928/hash-functions
// https://nullprogram.com/blog/2018/07/31/
// https://www.reddit.com/r/RNG/comments/jqnq20/the_wang_and_jenkins_integer_hash_functions_just/
// https://marc-b-reynolds.github.io/math/2019/08/10/Avalanche.html
// https://github.com/jonmaiga/mx3/blob/master/mx3.h
#mix64: proc(x: u64) => u64 {
	// https://github.com/jonmaiga/mx3/blob/master/mx3.h
	#C: u64(0xbea225f9eb34556d)
	x = bit_xor(., bit_shr(., 32))
	x = .*C
	x = bit_xor(., bit_shr(., 29))
	x = .*C
	x = bit_xor(., bit_shr(., 32))
	x = .*C
	x = bit_xor(., bit_shr(., 29))
	return x
}

#mix64_stream: proc(h: u64, x: u64) => u64 {
	// https://github.com/jonmaiga/mx3/blob/master/mx3.h
	#C: u64(0xbea225f9eb34556d)
	x = .*C
	x = bit_xor(., bit_xor(bit_shr(., 57), bit_shr(., 43)))
	x = .*C
	h = .+x
	h = .*C
	return h
}

//u64 f_hash64_str_ex(fString s, u64 seed)
//#define f_hash64_str(s) f_hash64_str_ex(s, 0)

// Knuth's multiplicative hash
#knuth64: proc(x: u64) => u64 {
	#golden_ratio_64: u64(11400714819323198485) // The golden ratio of 2^64
	return x * golden_ratio_64
}

// -- Hasher ----------------

#Hasher: struct { state: u64 }

#begin: proc => Hasher {
	return {0}
}

#add: proc(h: ^Hasher, data: u64) {
	h.state = mix64_stream(., data)
}

#end: proc(h: ^Hasher) => u64 {
	return mix64(h.state)
}

// --------------------------


#fnv32: proc(str: ^raw, length: uint) => u32 {
	#fnv_prime: u32(0x811C9DC5)
	hash: u32(0)
	
	for i: 0, i < length, i = .+1 {
		hash = . * fnv_prime
		hash = bit_xor(., u32( (^u8(str))^ ))
		str = ^u8(uint(str) + 1)
	}

	return hash
}

