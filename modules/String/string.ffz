// Common string utilities for utf8-encoded strings.

// TODO:
// https://gist.github.com/d7samurai/c3e85e08f2a32d2fb3bc9d157c066be9

#Basic: import(":Basic")
#Array: import(":Array")

#Builder: Array.Array[u8]
#make_builder: Array.make[u8]
#push_byte: Array.push[u8]

#push_string: proc(builder: ^Builder, str: string) {
	Array.push_n[u8](builder, []u8(str))
}

#numeric_to_char: proc(n: uint) => u8 {
	// TODO: ret [?]u8{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}[n]
	ret ^u8(uint("0123456789abcdef".ptr) + n)^
}

#push_uint: proc(builder: ^Builder, value: uint) {
	push_integer(builder, value, 10)
}

#push_int: proc(builder: ^Builder, value: int) {
	if value >= 0 {
		push_integer(builder, uint(value), 10)
	}
	else {
		push_byte(builder, '-')
		push_integer(builder, uint(-value), 10)
	}
}

#push_integer: proc(builder: ^Builder, value: uint, base: uint) {
	i: builder.len
	
	for loop: true, loop, loop = value > 0 {
		tmp: value
		value = . / base
		
		digit: tmp - value * base
		push_byte(builder, numeric_to_char(digit))
	}
	
	// It's now printed in reverse, so let's reverse the digits
	
	j: builder.len - 1
	for , i < j {
		// hmm... what if j goes to negative?
		
		if j >= builder.slice.len {
			dbgbreak
			dbgbreak
		}
		
		tmp: builder.slice[j]
		builder.slice[j] = builder.slice[i]
		builder.slice[i] = tmp
		i = .+1
		j = .-1
	}
}

// See the formatting rules at :joinf
#push_joinf: proc(builder: ^Builder, format: string, args: []string) {
	format_bytes: []u8(format)
	
	next_arg_index: u8(0)
	
	for i: 0, i < format_bytes.len {
		c: format_bytes[i]
		
		new_i: i
		if c == '%' && new_i + 1 < format_bytes.len {
			c = format_bytes[new_i + 1]
			if c == '*' {
				Basic.assert(uint(next_arg_index) < args.len)
				push_string(builder, args[next_arg_index])
				
				next_arg_index = .+1
				new_i = .+2
			}
			else if c == '%' {
				push_byte(builder, '%')
				new_i = .+2
			}
			else if c >= '1' && c <= '9' {
				next_arg_index = c - '1'
				Basic.assert(uint(next_arg_index) < args.len)
				
				push_string(builder, args[next_arg_index])
				
				next_arg_index = .+1
				new_i = .+2
			}
		}
		
		if i == new_i {
			push_byte(builder, c)
			new_i= .+1
		}
		i = new_i
	}
}

#from_int: proc(value: int, alc: ^Basic.Allocator) => string {
	builder: make_builder(alc)
	push_int(&builder, value)
	ret string(builder.slice)
}

#from_uint: proc(value: uint, alc: ^Basic.Allocator) => string {
	builder: make_builder(alc)
	push_uint(&builder, value)
	ret string(builder.slice)
}

// hmm.. todo: accept `any`?
#printf: proc(format: string, args: []string) {
	mark: Basic.temp_get_mark()
	
	s: joinf(format, args, Basic.temp_alc())
	Basic.print(s)
	
	Basic.temp_set_mark(mark)
}

// Join using a format string
// Rules:
// - %* is replaced with the next argument in the list
// - %n is replaced with the n-th argument, where n is a number between 1 and 9.
// -    If %* is used after this, the argument index for it will be set to n + 1
// - %% is replaced with %
// 
// i.e.
//
//   joinf("%* %* operator (%%) returns %1 remainder of a division. %* rocks!", {"the", "modulo"}
//
// will expand to:
//
//   `the modulo operator (%) returns the remainder of a division. modulo rocks!`
//
#joinf: proc(format: string, args: []string, alc: ^Basic.Allocator) => string {
	builder: make_builder(alc)
	push_joinf(&builder, format, args)
	ret string(builder.slice)
}


// Temporary allocator helpers

#tjoinf:      proc(format: string, args: []string) => string  { ret joinf(format, args, Basic.temp_alc()) }
#tfrom_int:   proc(value: int) => string                      { ret from_int(value, Basic.temp_alc()) }
#tfrom_uint:  proc(value: uint) => string                     { ret from_uint(value, Basic.temp_alc()) }
