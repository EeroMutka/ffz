
// CompareFn: proc(a: ^T, b: ^T) => bool
// HashFn: proc(a: ^T) => u32

// Maybe in the future, we could have default value for CompareFn and HashFn to be 'nil'.
// and use an #if to default to for example, proc(a: ^T, b: ^T) => bool { return a^ == b^ }
// #KeyType: poly[T, CompareFn: nil, HashFn: nil] struct { key: T }

// Key: KeyType
//#Map: poly[Key, Value] struct {


/*
As an user, when using a custom type as the key, having to provide custom comparison and hash functions is annoying.
For now, let's just say the key is always just raw data.

#StringKey: distinct u64 // TODO: u128
#SliceKey: distinct u64 // TODO: u128
// key_from_bytes: poly[T] proc(slice: []T) {...}
// key_from_string: poly[T] proc(str: string) {...}

Map.get(&my_map, Map.key_from_bytes(my_int_array))


An incremental improvement to this would be to allow optional custom hash & comparison functions,
and to provide a StringKey and RawDataKey


If we wanted to be more sophisticated, we could allow
looping over struct members:

#get_hash: poly[T] proc(x: T) => u32 {
	#if type_is_integer(T) {
		h: u64(x)
		...
		return h
	}
	#else #if type_is_struct(T) {
		h: u64
		for member in my_struct {
			h += get_hash(member)
		}
		return h
	}
}

if we go down this route, maybe we could even use it instead of runtime type info for stuff like easy printing!

#print: poly[T] proc(fmt: string, args: T) {
}

print("hello, %", struct{x: f32}{10.5})
// could be shorthanded: 
print("hello, %", [2.5])

x: [1, true]
#for member in x {
	#if type_of(member) == bool {
		...
	}
}

*/

#Basic: import(":Basic")
#Hash: import(":Hash")

//#KeyType: poly[_KEY] struct {
//	KEY: typeid // We need to expose the polymorphic parameter as a compile-time struct member
//	compare_fn: proc(a: _KEY, b: _KEY) => bool
//	hash_fn: proc(a: _KEY) => u32
//}

#HASH_EMPTY_SLOT: u32(0)
#HASH_ZOMBIE_SLOT: u32(1)
#HASH_FIRST_VALID: u32(2)

#MapSlot: poly[K, T] struct {
	// This can have a special value of HASH_EMPTY_SLOT or HASH_ZOMBIE_SLOT
	hash: u32
	
	key: K
	value: T
}

#Map: poly[K, T] struct {
	arena: ^Basic.Arena
	alive_count: u32(0)
	slots: []MapSlot[K, T]{}
}

#make: poly[K, T] proc(arena: ^Basic.Arena) => Map[K, T] {
	return {arena: arena}
}

#add_assert_unique: poly[K, T] proc(m: ^Map[K, T], key: K, value: T) {
	added: _insert[K, T](m, key, value, overwrite: false)
	Basic.assert(added)
}

// returns `true` if the value did not exist in the map before
#add_or_ignore: poly[K, T] proc(m: ^Map[K, T], key: K, value: T) => bool {
	added: _insert(m, key, value, overwrite: false)
	return added
}

#add_or_overwrite: poly[K, T] proc(m: ^Map[K, T], key: K, value: T) {
	_ = _insert(m, key, value, overwrite: true)
}

/*
 The key *must* exist in the map when `get` is used
*/
#get: poly[K, T] proc(m: ^Map[K, T], key: K) => T {
	slot: find_slot(m, key)
	Basic.assert(slot != ^MapSlot[K, T](0))
	return slot.value
}


/*
 Returns null if not found.
 NOTE: the returned pointer is unstable across modifications to the map!
*/
#find_slot: poly[K, T] proc(m: ^Map[K, T], key: K) => ^MapSlot[K, T] {
	hash: Hash.fnv32(&key, size_of(K))
	if hash < HASH_FIRST_VALID {
		hash = HASH_FIRST_VALID
	}
	
	wrapping_mask: u32(m.slots.len) - 1
	slot_index: bit_and(hash, wrapping_mask)
	
	for loop: true, loop, {
		slot: &m.slots[slot_index]
		
		if slot.hash == hash && Basic.memcmp(&slot.key, &key, size_of(K)) == 0 {
			return slot
		}
		
		if slot.hash == HASH_EMPTY_SLOT {
			loop = false // This key does not exist in the map.
		}
		
		slot_index = bit_and((slot_index + 1), wrapping_mask)
	}
	
	return ^MapSlot[K, T](0)
}

#resize: poly[K, T] proc(m: ^Map[K, T], slot_count_pow2: uint) {
	Basic.assert(Basic.is_power_of_2(slot_count_pow2))
	#SlotType: MapSlot[K, T]
	
	old_slots: m.slots
	
	m.alive_count = 0
	m.slots = Basic.make_slice_undef[SlotType](slot_count_pow2, m.arena)
	Basic.memset(m.slots.ptr, 0, m.slots.len * size_of(SlotType)) // set each hash to HASH_EMPTY_SLOT
	
	for i: 0, i < old_slots.len, i=.+1 {
		slot: &old_slots[i]
		if slot.hash >= HASH_FIRST_VALID {
			add_assert_unique[K, T](m, slot.key, slot.value)
		}
	}
	
	//Basic.free_slice(old_slots, m.arena)
}

/*
 returns `true` if the value did not exist in the map before
*/
#_insert: poly[K, T] proc(m: ^Map[K, T], key: K, value: T, overwrite: bool) => bool {
	
	//      filled / allocated >= 70/100
	// <==> filled * 100 >= allocated * 70
	
	slot_count_before: m.slots.len
	if (uint(m.alive_count) + 1) * 100 >= slot_count_before * 70 {
		// expand the m; the + 7 is to make us start off with 8 elements initially
		new_capacity: Basic.round_up_to_power_of_2(m.slots.len + 7)
		resize(m, new_capacity)
	}
	
	hash: Hash.fnv32(&key, size_of(K))
	if hash < HASH_FIRST_VALID {
		hash = HASH_FIRST_VALID
	}
	
	wrapping_mask: u32(m.slots.len) - 1
	slot_index: bit_and(hash, wrapping_mask)
	first_unused_slot: ^MapSlot[K, T](0)
	
	for loop: true, loop, {
		slot: &m.slots[slot_index]
		
		if slot.hash == hash && Basic.memcmp(&slot.key, &key, size_of(K)) == 0 {
			// Key already exists in the map
			
			if overwrite {
				slot.value = value
			}
		}
		else if slot.hash < HASH_FIRST_VALID {
			if first_unused_slot == ^MapSlot[K, T](0) {
				// The element might still exist after this slot
				first_unused_slot = slot
			}
			if slot.hash == HASH_EMPTY_SLOT {
				loop = false // This key does not exist in the map.
			}
		}
		
		slot_index = bit_and(. + 1, wrapping_mask)
	}
	
	m.alive_count = .+1
	first_unused_slot.hash = hash
	first_unused_slot.key = key
	first_unused_slot.value = value
	return true
}

// -- Built-in key types ----------------------------------

/*#primitive_compare: poly[T] proc(a: T, b: T) => bool {
	return a == b
}

#primitive_hash: poly[T] proc(x: T) => u32 {
	hash: Hash.knuth64(u64(x))
	return u32(hash)
}

#Key_u8:  KeyType[u8]{u8, primitive_compare[u8], primitive_hash[u8]}
#Key_u16: KeyType[u16]{u16, primitive_compare[u16], primitive_hash[u16]}
#Key_u32: KeyType[u32]{u32, primitive_compare[u32], primitive_hash[u32]}
#Key_u64: KeyType[u64]{u64, primitive_compare[u64], primitive_hash[u64]}
*/
