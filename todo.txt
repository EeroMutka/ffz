[x] Finish futuregames application / CV
[x] Visual studio extension for FFZ

[x] allow 'type' in structs
[x] implicit polymorphic parameter binding for calls would be really nice...

[x] Get Map to work

[x] Slice, Array and Map visualizations in visual studio. Try to add the support in codeview for them

[] break/continue with labels

[] fix the situation with commas and newlines

[] Text rendering using texture/glyphs

[] Get keyboard + mouse input working with the 2D drawing sample app

[] struct and array ==, != comparison

[] Memory management; TLSF module, heap-scopes, heap-arenas.

[] @module_struct

[] slice bounds checking
	hmm, maybe this could be implemented similar to enabling libc where it's an optional tag that the Basic module implements.
	But to start with, we could just trigger a breakpoint instruction.

[] fix the "main" vs "entry" thing

--------------- Keith release candidate ---------------
[] deferred/scoped calls
[] optionals
[x] hash procedure type based on its contents, not its unique node
[] break, continue, to_else, named scopes
[] module ' declaration

[] typed poly-parameters

[] any + type info and module caching. These need to be solved at the same time I think.

- Goal #2: 3D chess game with OpenGL with no third-party dependencies, except
- cgltf, miniaudio, stbi, stbtt
- this game should include cool PBR graphics and sounds
	vxgi would be awesome. Could we make a game in sponza?

- towards a 3D level editor / engine!!

- Example programs ideas:
- Ray tracer demo program
- Game of life
- Chess game, maybe even 3d? That would be pretty cool!
- 2D physics simulation
- tetris? breakout? pong? snake?

Future:
- caching modules into object files / only rebuilding when the files have changed. For detecting if files have changed,
  we should use the file modtime.
