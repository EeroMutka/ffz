[x] Finish futuregames application / CV
[x] Visual studio extension for FFZ

[] allow 'type' in structs
[] Get Map to work

[] fix the situation with commas and newlines

[] Slice, Array and Map visualizations in visual studio. Try to add the support in codeview for them


[] Text rendering using texture/glyphs

[] Get keyboard + mouse input working with the 2D drawing sample app

[] struct and array ==, != comparison

[] Heap allocator, TLSF. Either make it into a module, or put it into Basic

[] @module_struct

[] slice bounds checking
	hmm, maybe this could be implemented similar to enabling libc where it's an optional tag that the Basic module implements


--------------- Keith release candidate ---------------
[] optionals
[] hash procedure type based on its contents, not its unique node
[] break, continue, to_else, named scopes
[] module ' declaration

[] implicit polymorphic parameter latching for calls would be really nice...
[] typed poly-parameters

[] any + type info and module caching. These need to be solved at the same time I think.

- Goal #2: 3D chess game with OpenGL with no third-party dependencies, except
- cgltf, miniaudio, stbi, stbtt
- this game should include cool PBR graphics and sounds
	vxgi would be awesome. Could we make a game in sponza?

- towards a 3D level editor / engine!!

- Example programs ideas:
- Ray tracer demo program
- Game of life
- Chess game, maybe even 3d? That would be pretty cool!
- 2D physics simulation
- tetris? breakout? pong? snake?

Future:
- caching modules into object files / only rebuilding when the files have changed. For detecting if files have changed,
  we should use the file modtime.
